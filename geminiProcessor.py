# -*- coding: utf-8 -*-
import os
import logging
import re
import google.generativeai as genai
import appealManager
from datetime import datetime
from precedents import PRECEDENTS
from handlers.telegraph_helpers import post_to_telegraph, markdown_to_html

log = logging.getLogger("hjr-bot.gemini")

GEMINI_MODEL_NAME = "models/gemini-1.5-pro-latest"

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
gemini_model = None

if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel(GEMINI_MODEL_NAME)
    except Exception as e:
        print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini API: {e}")
else:
    print("[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY.")

def _read_file(filename: str, error_message: str) -> str:
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"[–û–®–ò–ë–ö–ê] –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return error_message

def get_verdict_from_gemini(appeal: dict, commit_hash: str, bot_version: str, log_id: int):
    if not appeal:
        return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É."

    case_id = appeal.get('case_id')
    project_rules = _read_file('rules.txt', "–£—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    instructions = _read_file('instructions.txt', "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    created_at_dt = appeal.get('created_at')
    date_submitted = created_at_dt.strftime('%Y-%m-%d %H:%M UTC') if isinstance(created_at_dt, datetime) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    applicant_full_text = f"""
- –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {appeal.get('applicant_arguments', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—É–Ω–∫—Ç —É—Å—Ç–∞–≤–∞: {appeal.get('applicant_answers', {}).get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –ñ–µ–ª–∞–µ–º—ã–π —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {appeal.get('applicant_answers', {}).get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {appeal.get('applicant_answers', {}).get('q3', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
"""

    council_answers_list = appeal.get('council_answers', []) or []
    if council_answers_list:
        council_full_text = ""
        for answer in council_answers_list:
            council_full_text += f"""
---
–û—Ç–≤–µ—Ç –æ—Ç {answer.get('responder_info', '–†–µ–¥–∞–∫—Ç–æ—Ä –°–æ–≤–µ—Ç–∞')}:
- –ö–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã: {answer.get('main_arg', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–≤—É: {answer.get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –û—Ü–µ–Ω–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞—è–≤–∏—Ç–µ–ª—è: {answer.get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
---
"""
    else:
        council_full_text = "–°–æ–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫."

    precedents_text = ""
    similar_case = appealManager.find_similar_appeal(appeal.get('decision_text', ''), similarity_threshold=90)
    if similar_case:
        similar_case_data = appealManager.get_appeal(similar_case['case_id'])
        if similar_case_data:
            precedents_text = f"""
**–ö —Å–≤–µ–¥–µ–Ω–∏—é: –ü—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω–æ–µ –¥–µ–ª–æ ‚Ññ{similar_case_data['case_id']}**
- **–ü—Ä–µ–¥–º–µ—Ç —Å–ø–æ—Ä–∞:** {similar_case_data.get('decision_text', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- **–í–µ—Ä–¥–∏–∫—Ç:** {similar_case_data.get('ai_verdict', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
    if PRECEDENTS:
        precedents_text += "\n\n**–ö —Å–≤–µ–¥–µ–Ω–∏—é: –ê—Ä—Ö–∏–≤–Ω—ã–µ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã**\n"
        for p in PRECEDENTS:
            precedents_text += f"- –î–µ–ª–æ ‚Ññ{p['case_id']}: {p['summary']} –í–µ—Ä–¥–∏–∫—Ç: {p['decision_summary']}\n"


    final_instructions = instructions.format(case_id=case_id, commit_hash=commit_hash, log_id=log_id)
    final_instructions += f"\n–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞: {bot_version}"
    final_instructions += "\n–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–¢–ï–†–ú–ò–ù–û–õ–û–ì–ò–Ø' –≤ —É—Å—Ç–∞–≤–µ. **–°—Ä–∞–≤–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.**"

    prompt = f"""
{final_instructions}
{precedents_text}
**–£—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
<rules>
{project_rules}
</rules>
**–î–ï–¢–ê–õ–ò –î–ï–õ–ê ‚Ññ{case_id}**
1.  **–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:** {date_submitted}
2.  **–ü—Ä–µ–¥–º–µ—Ç —Å–ø–æ—Ä–∞ (–æ—Å–ø–∞—Ä–∏–≤–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ):**
    ```
    {appeal.get('decision_text', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
    ```
3.  **–ê–†–ì–£–ú–ï–ù–¢–´ –ó–ê –æ—Ç–º–µ–Ω—É —Ä–µ—à–µ–Ω–∏—è (–ü–æ–∑–∏—Ü–∏—è –ó–∞—è–≤–∏—Ç–µ–ª—è):**
    {applicant_full_text}
4.  **–ê–†–ì–£–ú–ï–ù–¢–´ –ü–†–û–¢–ò–í –æ—Ç–º–µ–Ω—ã —Ä–µ—à–µ–Ω–∏—è (–ü–æ–∑–∏—Ü–∏—è –°–æ–≤–µ—Ç–∞ –†–µ–¥–∞–∫—Ç–æ—Ä–æ–≤):**
    {council_full_text}
"""

    if not gemini_model:
        return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."
    try:
        log.info(f"--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API –ø–æ –¥–µ–ª—É #{case_id} (–º–æ–¥–µ–ª—å: {GEMINI_MODEL_NAME}) ---")
        response = gemini_model.generate_content(prompt)
        log.info(f"--- –û—Ç–≤–µ—Ç –æ—Ç Gemini API –ø–æ –¥–µ–ª—É #{case_id} –ø–æ–ª—É—á–µ–Ω ---")
        return response.text
    except Exception as e:
        log.error(f"–û–®–ò–ë–ö–ê Gemini API: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-–∞—Ä–±–∏—Ç—Ä—É. –î–µ—Ç–∞–ª–∏: {e}"

def finalize_appeal(appeal_data: dict, bot, commit_hash: str, bot_version: str):
    if not isinstance(appeal_data, dict) or 'case_id' not in appeal_data:
        print(f"[CRITICAL_ERROR] –í finalize_appeal –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    case_id = appeal_data['case_id']
    log.info(f"[FINALIZE] –ù–∞—á–∏–Ω–∞—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –¥–µ–ª–∞ #{case_id}")

    if not appealManager.are_arguments_meaningful(appeal_data.get('applicant_arguments', '')):
        log.warning(f"[FINALIZE_SKIP] –î–µ–ª–æ #{case_id} –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        appealManager.update_appeal(case_id, "status", "closed_invalid")
        appealManager.log_interaction("SYSTEM", "appeal_closed_invalid", case_id, "No valid arguments provided.")
        return

    log_id = appealManager.log_interaction("SYSTEM", "finalize_start", case_id)

    ai_verdict_text = get_verdict_from_gemini(appeal_data, commit_hash, bot_version, log_id)
    appealManager.update_appeal(case_id, "ai_verdict", ai_verdict_text)

    created_at_dt = appeal_data.get('created_at')
    date_submitted = created_at_dt.strftime('%Y-%m-%d %H:%M UTC') if isinstance(created_at_dt, datetime) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    applicant_answers = appeal_data.get('applicant_answers', {}) or {}
    applicant_position = (
        f"*–ê—Ä–≥—É–º–µ–Ω—Ç—ã:* {appeal_data.get('applicant_arguments', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"*–ù–∞—Ä—É—à–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —É—Å—Ç–∞–≤–∞:* {applicant_answers.get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"*–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* {applicant_answers.get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"*–î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç:* {applicant_answers.get('q3', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )

    council_answers_list = appeal_data.get('council_answers', []) or []
    if council_answers_list:
        council_position = ""
        for answer in council_answers_list:
            council_position += (
                f"\n\n\n*–û—Ç–≤–µ—Ç –æ—Ç {answer.get('responder_info', '–†–µ–¥–∞–∫—Ç–æ—Ä –°–æ–≤–µ—Ç–∞')}:*\n"
                f"*–ö–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã:* {answer.get('main_arg', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–≤—É:* {answer.get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"*–û—Ü–µ–Ω–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞—è–≤–∏—Ç–µ–ª—è:* {answer.get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
            )
    else:
        council_position = "_–°–æ–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤._"

    final_message_markdown = (
        f"‚öñÔ∏è *–ò—Ç–æ–≥–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}*\n\n"
        f"**–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:** {date_submitted}\n"
        f"**–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞:** `{bot_version}`\n"
        f"**–í–µ—Ä—Å–∏—è –∫–æ–º–º–∏—Ç–∞:** `{commit_hash}`\n"
        f"**ID –í–µ—Ä–¥–∏–∫—Ç–∞:** `{log_id}`\n\n"
        f"--- \n\n"
        f"üìå **–ü—Ä–µ–¥–º–µ—Ç —Å–ø–æ—Ä–∞:**\n"
        f"```\n{appeal_data.get('decision_text', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n```\n\n"
        f"--- \n\n"
        f"üìÑ **–ü–æ–∑–∏—Ü–∏—è –ó–∞—è–≤–∏—Ç–µ–ª—è (–∞–Ω–æ–Ω–∏–º–Ω–æ):**\n"
        f"{applicant_position}\n\n"
        f"--- \n\n"
        f"üë• **–ü–æ–∑–∏—Ü–∏—è –°–æ–≤–µ—Ç–∞ –†–µ–¥–∞–∫—Ç–æ—Ä–æ–≤:**\n"
        f"{council_position}\n\n"
        f"--- \n\n"
        f"ü§ñ **{ai_verdict_text}**"
    )

    applicant_chat_id = appeal_data.get('applicant_chat_id')
    appeals_channel_id = os.getenv('APPEALS_CHANNEL_ID')

    clean_verdict_markdown = re.sub(r'</?rules>', '', final_message_markdown)

    log.info(f"–ü—É–±–ª–∏–∫—É—é –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –¥–µ–ª—É #{case_id} –≤ Telegraph...")
    final_message_html = markdown_to_html(clean_verdict_markdown)
    page_url = post_to_telegraph(f"–í–µ—Ä–¥–∏–∫—Ç –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}", final_message_html)

    if page_url:
        message_to_send = (
            f"‚öñÔ∏è *–í–µ—Ä–¥–∏–∫—Ç –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id} –≥–æ—Ç–æ–≤.*\n\n"
            f"–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n{page_url}"
        )
    else:
        message_to_send = clean_verdict_markdown[:4000] + "\n\n_[–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏]_"

    try:
        if applicant_chat_id:
            bot.send_message(applicant_chat_id, message_to_send, parse_mode="Markdown")
        if appeals_channel_id:
            bot.send_message(appeals_channel_id, message_to_send, parse_mode="Markdown")
    except Exception as e:
        log.error(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –¥–µ–ª—É #{case_id}: {e}")
        appealManager.log_interaction("SYSTEM", "send_verdict_error", case_id, str(e))

    appealManager.update_appeal(case_id, "status", "closed")
    appealManager.log_interaction("SYSTEM", "appeal_closed", case_id)
    log.info(f"[FINALIZE] –î–µ–ª–æ #{case_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞
def get_review_from_gemini(appeal: dict, commit_hash: str, bot_version: str, log_id: int):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —É—Å–ª–æ–∂–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ü–ï–†–ï–°–ú–û–¢–†–ê –¥–µ–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç.
    """
    case_id = appeal.get('case_id')
    project_rules = _read_file('rules.txt', "–£—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    review_data = appeal.get('review_data', {})
    new_arguments_list = review_data.get('new_arguments', [])
    new_arguments_text = ""
    if new_arguments_list:
        for arg in new_arguments_list:
            new_arguments_text += f"- –ê—Ä–≥—É–º–µ–Ω—Ç –æ—Ç {arg['author']}: {arg['argument']}\n"
    else:
        new_arguments_text = "–ù–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–µ –±—ã–ª–æ."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –∑–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä
    poll_data = review_data.get("poll", {})
    poll_text = f"–í–æ–ø—Ä–æ—Å: '{poll_data.get('question', '')}', –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: "
    poll_text += ", ".join([f"'{opt.get('text')}': {opt.get('voter_count')} –≥–æ–ª." for opt in poll_data.get('options', [])])

    # –ù–æ–≤—ã–π, —É—Å–ª–æ–∂–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    prompt = f"""
–¢—ã ‚Äî –ò–ò-–∞—Ä–±–∏—Ç—Ä –≤—ã—Å—à–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –¥–µ–ª–æ ‚Ññ{case_id}, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É–∂–µ –±—ã–ª –≤—ã–Ω–µ—Å–µ–Ω –≤–µ—Ä–¥–∏–∫—Ç.
–°–æ–≤–µ—Ç –†–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ({poll_text}) –∏ —Ä–µ—à–∏–ª –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ –¥–µ–ª–æ.
–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ **–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ** –∏ **–Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã** –æ—Ç –°–æ–≤–µ—Ç–∞.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî **–ø–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å** —Å–≤–æ–π –ø—Ä–æ—à–ª—ã–π –∞–Ω–∞–ª–∏–∑. –ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ –Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —è–≤–ª—è—é—Ç—Å—è –≤–µ—Å–æ–º—ã–º–∏ –∏ –º–µ–Ω—è—é—Ç —Å—É—Ç—å –¥–µ–ª–∞, –∏–∑–º–µ–Ω–∏ —Å–≤–æ–π –≤–µ—Ä–¥–∏–∫—Ç. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤—å –µ–≥–æ –≤ —Å–∏–ª–µ, –Ω–æ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É** –Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ —Ç–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç **–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—é** (—Å–æ–≥–ª–∞—Å–Ω–æ –ø—É–Ω–∫—Ç—É 8.6 –£—Å—Ç–∞–≤–∞).

**–£—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
<rules>
{project_rules}
</rules>

**–î–ï–¢–ê–õ–ò –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ì–û –î–ï–õ–ê ‚Ññ{case_id}**
{appeal.get('decision_text', '')}
- –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è: {appeal.get('applicant_arguments', '')}
- –û—Ç–≤–µ—Ç—ã –°–æ–≤–µ—Ç–∞: {appeal.get('council_answers', [])}

**–ü–†–ï–î–´–î–£–©–ò–ô –í–ï–†–î–ò–ö–¢:**
    {appeal.get('ai_verdict', '–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')}
    
**–ù–û–í–´–ï –ê–†–ì–£–ú–ï–ù–¢–´ –î–õ–Ø –ü–ï–†–ï–°–ú–û–¢–†–ê:**
{new_arguments_text}
"""

    if not gemini_model:
        return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."
    try:
        log.info(f"--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ü–ï–†–ï–°–ú–û–¢–† –≤ Gemini API –ø–æ –¥–µ–ª—É #{case_id} ---")
        response = gemini_model.generate_content(prompt)
        log.info(f"--- –û—Ç–≤–µ—Ç –Ω–∞ –ü–ï–†–ï–°–ú–û–¢–† –æ—Ç Gemini API –ø–æ –¥–µ–ª—É #{case_id} –ø–æ–ª—É—á–µ–Ω ---")
        return response.text
    except Exception as e:
        log.error(f"–û–®–ò–ë–ö–ê Gemini API –ø—Ä–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-–∞—Ä–±–∏—Ç—Ä—É. –î–µ—Ç–∞–ª–∏: {e}"

def finalize_review(appeal_data: dict, bot, commit_hash: str, bot_version: str):
    case_id = appeal_data['case_id']
    log.info(f"[FINALIZE_REVIEW] –ù–∞—á–∏–Ω–∞—é –ü–ï–†–ï–°–ú–û–¢–† –¥–µ–ª–∞ #{case_id}")

    log_id = appealManager.log_interaction("SYSTEM", "review_finalize_start", case_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    ai_review_verdict = get_review_from_gemini(appeal_data, commit_hash, bot_version, log_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –≤ review_data, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–µ—Ä–µ—Ç—å —Å—Ç–∞—Ä—ã–π
    review_data = appeal_data.get('review_data', {})
    review_data['final_verdict'] = ai_review_verdict
    appealManager.update_appeal(case_id, "review_data", review_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_verdict_text = (
        f"‚öñÔ∏è *–§–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id} (–ü–û–°–õ–ï –ü–ï–†–ï–°–ú–û–¢–†–ê)*\n\n"
        f"**ID –§–∏–Ω–∞–ª—å–Ω–æ–≥–æ –í–µ—Ä–¥–∏–∫—Ç–∞:** `{log_id}`\n"
        f"**–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞:** `{bot_version}`\n"
        f"**–í–µ—Ä—Å–∏—è –∫–æ–º–º–∏—Ç–∞:** `{commit_hash}`\n\n"
        f"--- \n\n"
        f"ü§ñ **{ai_review_verdict}**"
    )

    applicant_chat_id = appeal_data.get('applicant_chat_id')
    appeals_channel_id = os.getenv('APPEALS_CHANNEL_ID')

    try:
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegraph
        log.info(f"–ü—É–±–ª–∏–∫—É—é –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –ü–ï–†–ï–°–ú–û–¢–†–£ –¥–µ–ª–∞ #{case_id} –≤ Telegraph...")
        final_message_html = markdown_to_html(final_verdict_text)
        page_url = post_to_telegraph(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id} (–ü–µ—Ä–µ—Å–º–æ—Ç—Ä)", final_message_html)

        if page_url:
            message_to_send = (
                f"‚öñÔ∏è *–§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id} (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞) –≥–æ—Ç–æ–≤.*\n\n"
                f"–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n{page_url}"
            )
        else:
            message_to_send = final_verdict_text[:4000] + "\n\n_[–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏]_"

        if applicant_chat_id:
            bot.send_message(applicant_chat_id, message_to_send, parse_mode="Markdown")
        if appeals_channel_id:
            bot.send_message(appeals_channel_id, message_to_send, parse_mode="Markdown")
    except Exception as e:
        log.error(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä—É –¥–µ–ª–∞ #{case_id}: {e}")

    appealManager.update_appeal(case_id, "status", "closed_after_review")
    appealManager.log_interaction("SYSTEM", "appeal_closed_after_review", case_id)
    log.info(f"[FINALIZE_REVIEW] –î–µ–ª–æ #{case_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞.")