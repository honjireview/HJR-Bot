# -*- coding: utf-8 -*-
import os
import google.generativeai as genai
import appealManager
from datetime import datetime
# –í connectionChecker –±–æ–ª—å—à–µ –Ω–µ—Ç GEMINI_MODEL_NAME, —Ç–∞–∫ —á—Ç–æ —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–º–ø–æ—Ä—Ç
# –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∑–¥–µ—Å—å, –≥–¥–µ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
GEMINI_MODEL_NAME = "models/gemini-1.5-flash-latest"


GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
gemini_model = None

if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel(GEMINI_MODEL_NAME)
    except Exception as e:
        print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini API: {e}")
else:
    print("[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY.")

def _read_file(filename: str, error_message: str) -> str:
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"[–û–®–ò–ë–ö–ê] –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return error_message

def get_verdict_from_gemini(case_id, commit_hash, log_id):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä–¥–∏–∫—Ç –æ—Ç Gemini.
    """
    appeal = appealManager.get_appeal(case_id)
    if not appeal:
        return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É."

    project_rules = _read_file('rules.txt', "–£—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    instructions = _read_file('instructions.txt', "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    applicant_info = appeal.get('applicant_info', {})
    applicant_name = f"{applicant_info.get('first_name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')} (@{applicant_info.get('username', '—Å–∫—Ä—ã—Ç–æ')})"

    created_at_dt = appeal.get('created_at')
    date_submitted = created_at_dt.strftime('%Y-%m-%d %H:%M UTC') if isinstance(created_at_dt, datetime) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    applicant_full_text = f"""
- –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {appeal.get('applicant_arguments', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—É–Ω–∫—Ç —É—Å—Ç–∞–≤–∞: {appeal.get('applicant_answers', {}).get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –ñ–µ–ª–∞–µ–º—ã–π —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {appeal.get('applicant_answers', {}).get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {appeal.get('applicant_answers', {}).get('q3', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
"""

    council_answers_list = appeal.get('council_answers', [])
    if council_answers_list:
        council_full_text = ""
        for answer in council_answers_list:
            council_full_text += f"""
---
–û—Ç–≤–µ—Ç –æ—Ç {answer.get('responder_info', '–†–µ–¥–∞–∫—Ç–æ—Ä –°–æ–≤–µ—Ç–∞')}:
- –ö–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã: {answer.get('main_arg', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–≤—É: {answer.get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
- –û—Ü–µ–Ω–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞—è–≤–∏—Ç–µ–ª—è: {answer.get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
---
"""
    else:
        council_full_text = "–°–æ–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫."

    final_instructions = instructions.format(case_id=case_id, commit_hash=commit_hash, log_id=log_id)

    prompt = f"""
{final_instructions}

**–£—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
<rules>
{project_rules}
</rules>

**–î–ï–¢–ê–õ–ò –î–ï–õ–ê ‚Ññ{case_id}**

1.  **–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:** {date_submitted}
2.  **–ó–∞—è–≤–∏—Ç–µ–ª—å:** {applicant_name}
3.  **–ü—Ä–µ–¥–º–µ—Ç —Å–ø–æ—Ä–∞ (–æ—Å–ø–∞—Ä–∏–≤–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ):**
    ```
    {appeal.get('decision_text', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
    ```
4.  **–ü–æ–∑–∏—Ü–∏—è –ó–∞—è–≤–∏—Ç–µ–ª—è:**
    {applicant_full_text}
5.  **–ü–æ–∑–∏—Ü–∏—è –°–æ–≤–µ—Ç–∞ –†–µ–¥–∞–∫—Ç–æ—Ä–æ–≤:**
    {council_full_text}
"""

    if not gemini_model:
        return "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."
    try:
        print(f"--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API –ø–æ –¥–µ–ª—É #{case_id} (–º–æ–¥–µ–ª—å: {GEMINI_MODEL_NAME}) ---")
        response = gemini_model.generate_content(prompt)
        print(f"--- –û—Ç–≤–µ—Ç –æ—Ç Gemini API –ø–æ –¥–µ–ª—É #{case_id} –ø–æ–ª—É—á–µ–Ω ---")
        return response.text
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] Gemini API: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-–∞—Ä–±–∏—Ç—Ä—É. –î–µ—Ç–∞–ª–∏: {e}"

def finalize_appeal(case_id, bot, commit_hash):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä–¥–∏–∫—Ç –æ—Ç –ò–ò, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ü–û–õ–ù–´–ô –ø–æ—Å—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–µ–ª–æ.
    """
    print(f"[FINALIZE] –ù–∞—á–∏–Ω–∞—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –¥–µ–ª–∞ #{case_id}")

    appeal_data = appealManager.get_appeal(case_id)
    if not appeal_data:
        print(f"[CRITICAL_ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É #{case_id} –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.")
        appealManager.log_interaction("SYSTEM", "finalize_error_no_case", case_id)
        return

    log_id = appealManager.log_interaction("SYSTEM", "finalize_start", case_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–¥–∏–∫—Ç –æ—Ç –ò–ò
    ai_verdict_text = get_verdict_from_gemini(case_id, commit_hash, log_id)
    appealManager.update_appeal(case_id, "ai_verdict", ai_verdict_text)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ ---

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É –¥–ª—è –ø–æ—Å—Ç–∞
    created_at_dt = appeal_data.get('created_at')
    date_submitted = created_at_dt.strftime('%Y-%m-%d %H:%M UTC') if isinstance(created_at_dt, datetime) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    applicant_answers = appeal_data.get('applicant_answers', {}) or {}
    applicant_position = (
        f"*–ê—Ä–≥—É–º–µ–Ω—Ç—ã:* {appeal_data.get('applicant_arguments', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"*–ù–∞—Ä—É—à–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —É—Å—Ç–∞–≤–∞:* {applicant_answers.get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"*–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* {applicant_answers.get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"*–î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç:* {applicant_answers.get('q3', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )

    council_answers_list = appeal_data.get('council_answers', []) or []
    if council_answers_list:
        council_position = ""
        for answer in council_answers_list:
            council_position += (
                f"\n\n\n*–û—Ç–≤–µ—Ç –æ—Ç {answer.get('responder_info', '–†–µ–¥–∞–∫—Ç–æ—Ä –°–æ–≤–µ—Ç–∞')}:*\n"
                f"*–ö–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã:* {answer.get('main_arg', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ —É—Å—Ç–∞–≤—É:* {answer.get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"*–û—Ü–µ–Ω–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞—è–≤–∏—Ç–µ–ª—è:* {answer.get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
            )
    else:
        council_position = "_–°–æ–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤._"

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_message = (
        f"‚öñÔ∏è *–ò—Ç–æ–≥–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}*\n\n"
        f"**–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:** {date_submitted}\n"
        f"**–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ (–∫–æ–º–º–∏—Ç):** `{commit_hash}`\n"
        f"**ID –í–µ—Ä–¥–∏–∫—Ç–∞:** `{log_id}`\n\n"
        f"--- \n\n"
        f"üìÑ **–ü–æ–∑–∏—Ü–∏—è –ó–∞—è–≤–∏—Ç–µ–ª—è:**\n"
        f"{applicant_position}\n\n"
        f"--- \n\n"
        f"üë• **–ü–æ–∑–∏—Ü–∏—è –°–æ–≤–µ—Ç–∞ –†–µ–¥–∞–∫—Ç–æ—Ä–æ–≤:**\n"
        f"{council_position}\n\n"
        f"--- \n\n"
        f"ü§ñ **{ai_verdict_text}**" # –í–µ—Ä–¥–∏–∫—Ç –ò–ò —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    applicant_chat_id = appeal_data.get('applicant_chat_id')
    appeals_channel_id = os.getenv('APPEALS_CHANNEL_ID')

    try:
        if applicant_chat_id:
            bot.send_message(applicant_chat_id, final_message, parse_mode="Markdown")
        if appeals_channel_id:
            bot.send_message(appeals_channel_id, final_message, parse_mode="Markdown")
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –¥–µ–ª—É #{case_id}: {e}")
        appealManager.log_interaction("SYSTEM", "send_verdict_error", case_id, str(e))

    appealManager.update_appeal(case_id, "status", "closed")
    appealManager.log_interaction("SYSTEM", "appeal_closed", case_id)
    print(f"[FINALIZE] –î–µ–ª–æ #{case_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")