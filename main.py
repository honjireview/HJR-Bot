# -*- coding: utf-8 -*-
"""
main.py ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram + Flask

–í–º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ, –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
–≤ —Ñ–æ–Ω–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º HTTP-–∑–∞–ø—Ä–æ—Å–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π lock-file,
—á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö
–ø—Ä–æ—Ü–µ—Å—Å–∞—Ö/–≤–æ—Ä–∫–µ—Ä–∞—Ö.

–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–æ–µ–∫—Ç (–∑–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway) –∏ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ.
"""

import os
import time
import logging
from threading import Thread
from flask import Flask, request, abort
import telebot

# -------- –õ–û–ì–ò --------
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("hjr-bot")

# -------- –û–ö–†–£–ñ–ï–ù–ò–ï --------
def env(name: str, fallback: str | None = None) -> str:
    val = os.getenv(name, fallback)
    if val is None or str(val).strip() == "":
        raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {name}")
    return str(val).strip()

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ TELEGRAM_TOKEN, –∏ BOT_TOKEN (–≤–æ–∑—å–º—ë–º —á—Ç–æ –∑–∞–¥–∞–Ω–æ)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –∏–ª–∏ BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

# WEBHOOK_BASE_URL –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –∫–∞–∫:
# - –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É: https://hjr-bot-production.up.railway.app
# - –∏–ª–∏ –¥–æ–º–µ–Ω –±–µ–∑ —Å—Ö–µ–º—ã: hjr-bot-production.up.railway.app
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL")
if not WEBHOOK_BASE_URL:
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    WEBHOOK_BASE_URL = os.getenv("PUBLIC_URL") or os.getenv("RAILWAY_PUBLIC_DOMAIN")

if not WEBHOOK_BASE_URL or str(WEBHOOK_BASE_URL).strip().lower() in ("none", ""):
    raise RuntimeError(
        "–ù–µ –Ω–∞–π–¥–µ–Ω WEBHOOK_BASE_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. "
        "–£–∫–∞–∂–∏ –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω Railway, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://hjr-bot-production.up.railway.app"
    )

WEBHOOK_BASE_URL = WEBHOOK_BASE_URL.strip().rstrip("/")
if not WEBHOOK_BASE_URL.startswith("http://") and not WEBHOOK_BASE_URL.startswith("https://"):
    WEBHOOK_BASE_URL = "https://" + WEBHOOK_BASE_URL

# –ò—Ç–æ–≥–æ–≤—ã–π URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"{WEBHOOK_BASE_URL}/webhook/{TELEGRAM_TOKEN}"

# -------- TELEBOT + FLASK --------
# parse_mode –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å; —É –≤–∞—Å –±—ã–ª HTML
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")
app = Flask(__name__)

# –í–ê–ñ–ù–û: lockfile —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
LOCKFILE = "/tmp/hjr_set_webhook.lock"


# ----------------- handlers (–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤–Ω—É—Ç—Ä–∏) -----------------
@bot.message_handler(commands=["start", "help"])
def on_start(message):
    bot.reply_to(message, "–ë–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ üîî")


@bot.message_handler(func=lambda _msg: True, content_types=["text"])
def echo(message):
    bot.send_message(message.chat.id, f"–≠—Ö–æ: {message.text}")


# ----------------- webhook route -----------------
@app.post(f"/webhook/{TELEGRAM_TOKEN}")
def telegram_webhook():
    if request.headers.get("content-type") != "application/json":
        abort(400)
    update = telebot.types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "ok", 200


# Health endpoints
@app.get("/")
def root():
    return "OK", 200


@app.get("/healthz")
def health():
    return "healthy", 200


# ----------------- ensure_webhook logic -----------------
def ensure_webhook_once():
    """–°—Ç–∞–≤–∏—Ç webhook —Å—Ç—Ä–æ–≥–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π WEBHOOK_URL.
    –ù–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º
    –µ–≥–æ –≤ before_first_request ‚Äî —Å–º. –Ω–∏–∂–µ).
    """
    try:
        info = bot.get_webhook_info()
    except Exception as e:
        log.warning("get_webhook_info failed: %s", e)
        info = None

    current_url = getattr(info, "url", "") if info is not None else ""
    if current_url == WEBHOOK_URL:
        log.info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π) –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    log.info("–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –±—ã–ª)...")
    try:
        bot.delete_webhook(drop_pending_updates=True)
        time.sleep(0.5)
    except Exception as e:
        log.warning("delete_webhook: %s", e)

    log.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–æ–≤—ã–π webhook ‚Üí %s", WEBHOOK_URL)
    try:
        bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
        log.info("set_webhook: ok")
    except Exception as e:
        log.exception("set_webhook failed: %s", e)
        raise


def ensure_webhook_once_safe():
    """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö
    –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö/–≤–æ—Ä–∫–µ—Ä–∞—Ö ‚Äî —Å–æ–∑–¥–∞—ë–º lock-file –∞—Ç–æ–º–∞—Ä–Ω–æ —á–µ—Ä–µ–∑ mode='x'.
    """
    try:
        # –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å lockfile –∞—Ç–æ–º–∞—Ä–Ω–æ
        fd = None
        try:
            # open with 'x' ‚Äî —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏–Ω–∞—á–µ –±—Ä–æ—Å–∞–µ—Ç FileExistsError
            with open(LOCKFILE, 'x'):
                pass
        except FileExistsError:
            log.info("Lockfile —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞ –≤ —ç—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ")
            return

        # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å ‚Äî lockfile —Å–æ–∑–¥–∞–Ω –Ω–∞–º–∏
        try:
            ensure_webhook_once()
        finally:
            # –û—Å—Ç–∞–≤–ª—è–µ–º lockfile –∫–∞–∫ –º–∞—Ä–∫–µ—Ä ‚Äî –º–æ–∂–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å.
            # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª—è—Ç—å, —Ä–∞—Å—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É.
            # try: os.remove(LOCKFILE)
            # except Exception: pass
            pass
    except Exception as e:
        log.exception("ensure_webhook_once_safe error: %s", e)


# ----------------- –∑–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ–æ–Ω–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ -----------------
def _ensure_webhook_background():
    try:
        ensure_webhook_once_safe()
    except Exception as e:
        log.exception("ensure_webhook_once failed in background: %s", e)


@app.before_first_request
def schedule_webhook_setup():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook –≤ —Ñ–æ–Ω–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º HTTP-–∑–∞–ø—Ä–æ—Å–µ.
    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ
    webhook –±—É–¥–µ—Ç –ø–æ–ø—ã—Ç–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.
    """
    t = Thread(target=_ensure_webhook_background, daemon=True)
    t.start()


# ----------------- –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ / gunicorn -----------------
if __name__ == '__main__':
    port = int(os.getenv("PORT", "8080"))
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ —É–¥–æ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Flask –Ω–∞–ø—Ä—è–º—É—é
    app.run(host="0.0.0.0", port=port)

# –û–±—ä–µ–∫—Ç app –Ω—É–∂–µ–Ω gunicorn'—É: main:app
# –ü—Ä–∏ –¥–µ–ø–ª–æ–µ –≤ Railway Procfile –æ–±—ã—á–Ω–æ: web: gunicorn -w 1 -k gthread main:app