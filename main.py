# -*- coding: utf-8 -*-

import os
import time
import logging
import subprocess
from threading import Thread
from flask import Flask, request, abort
import telebot
from datetime import datetime

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
COMMIT_HASH = os.getenv("RAILWAY_GIT_COMMIT_SHA", "N/A")[:7]
print(f"[INFO] –í–µ—Ä—Å–∏—è –∫–æ–º–º–∏—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫: {COMMIT_HASH}")
BOT_VERSION = os.getenv("BOT_RELEASE_VERSION", "dev-build")
print(f"[INFO] –í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫: {BOT_VERSION}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("hjr-bot")

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL")
COUNCIL_CHAT_ID = os.getenv("EDITORS_GROUP_ID") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è stop_poll

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

# --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ ---
bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π ---
import connectionChecker
import appealManager
from handlers import register_all_handlers
from handlers.council_helpers import resolve_council_id

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
register_all_handlers(bot)

# --- Webhook route –∏ Health Check ---
@app.post(f"/webhook/{TELEGRAM_TOKEN}")
def telegram_webhook():
    if request.headers.get("content-type") == "application/json":
        update = telebot.types.Update.de_json(request.get_data(as_text=True))
        bot.process_new_updates([update])
        return "ok", 200
    abort(400)

@app.get("/")
def health_check():
    return "Bot is running.", 200

def startup_and_timer_tasks():
    from geminiProcessor import finalize_appeal, finalize_review
    from handlers.admin_flow import sync_editors_list

    log.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    time.sleep(3)

    if not connectionChecker.check_all_apis(bot):
        log.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å. –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    log.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤...")
    sync_editors_list(bot)

    if WEBHOOK_BASE_URL:
        webhook_url = f"{WEBHOOK_BASE_URL.strip('/')}/webhook/{TELEGRAM_TOKEN}"
        current_webhook = bot.get_webhook_info()
        if current_webhook.url != webhook_url:
            log.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –Ω–∞: {webhook_url}")
            bot.remove_webhook()
            time.sleep(0.5)
            bot.set_webhook(url=webhook_url)
            log.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            log.info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        log.warning("WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω. Webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    log.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤.")
    while True:
        try:
            active_appeals = appealManager.get_appeals_in_collection()
            for appeal_data in active_appeals:
                if not appeal_data or 'case_id' not in appeal_data:
                    continue

                case_id = appeal_data['case_id']
                status = appeal_data.get('status')
                expires_at = appeal_data.get('timer_expires_at')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–µ—Ä
                if not (expires_at and datetime.now(expires_at.tzinfo) > expires_at):
                    # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∏—Å—Ç–µ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–ø–µ–ª–ª—è—Ü–∏–π
                    if status == 'collecting':
                        expected_responses = appeal_data.get('expected_responses')
                        if expected_responses is not None and expected_responses > 0:
                            council_answers = appeal_data.get('council_answers') or []
                            if len(council_answers) >= expected_responses:
                                log.info(f"–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è –¥–µ–ª–∞ #{case_id}")
                                finalize_appeal(appeal_data, bot, COMMIT_HASH, BOT_VERSION)
                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–µ–ª—É, –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∏—Å—Ç–µ–∫

                # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if status == 'collecting':
                    log.info(f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–µ–ª–∞ #{case_id}.")
                    finalize_appeal(appeal_data, bot, COMMIT_HASH, BOT_VERSION)

                elif status == 'review_poll_pending':
                    log.info(f"–¢–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä—É –¥–µ–ª–∞ #{case_id} –∏—Å—Ç–µ–∫. –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
                    review_data = appeal_data.get('review_data', {})
                    poll_message_id = review_data.get('poll_message_id')

                    if poll_message_id and COUNCIL_CHAT_ID:
                        final_poll = bot.stop_poll(COUNCIL_CHAT_ID, poll_message_id)

                        total_members = bot.get_chat_member_count(COUNCIL_CHAT_ID) - 1 # –í—ã—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
                        inactive_members = appealManager.count_inactive_editors()
                        active_members = total_members - inactive_members
                        threshold = active_members / 2

                        for_votes = 0
                        for opt in final_poll.options:
                            if "–¥–∞" in opt.text.lower():
                                for_votes = opt.voter_count

                        if for_votes > threshold:
                            log.info(f"–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –¥–µ–ª–∞ #{case_id} –æ–¥–æ–±—Ä–µ–Ω ({for_votes} > {threshold}).")
                            appealManager.update_appeal(case_id, "status", "reviewing")
                            new_expires_at = datetime.utcnow() + timedelta(hours=24)
                            appealManager.update_appeal(case_id, "timer_expires_at", new_expires_at)
                            bot.send_message(COUNCIL_CHAT_ID, f"üì£ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä –¥–µ–ª–∞ ‚Ññ{case_id} –æ–¥–æ–±—Ä–µ–Ω –°–æ–≤–µ—Ç–æ–º. –ù–∞—á–∞–ª—Å—è 24-—á–∞—Å–æ–≤–æ–π —Å–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/replyrecase {case_id}` –≤ –õ–°.", message_thread_id=appeal_data.get("message_thread_id"))
                        else:
                            log.info(f"–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –¥–µ–ª–∞ #{case_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω ({for_votes} <= {threshold}).")
                            appealManager.update_appeal(case_id, "status", "closed") # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
                            bot.send_message(COUNCIL_CHAT_ID, f"–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –¥–µ–ª–∞ ‚Ññ{case_id} –Ω–µ –Ω–∞–±—Ä–∞–ª –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –∏ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.", message_thread_id=appeal_data.get("message_thread_id"))

                elif status == 'reviewing':
                    log.info(f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ü–ï–†–ï–°–ú–û–¢–†–ê –¥–µ–ª–∞ #{case_id}.")
                    finalize_review(appeal_data, bot, COMMIT_HASH, BOT_VERSION)

        except Exception as e:
            log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}", exc_info=True)
        time.sleep(60)

background_thread = Thread(target=startup_and_timer_tasks, daemon=True)
background_thread.start()