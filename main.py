import os
import time
import logging
from flask import Flask, request, abort
import telebot

# -------- –õ–û–ì–ò --------
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("hjr-bot")

# -------- –û–ö–†–£–ñ–ï–ù–ò–ï --------
def env(name: str, fallback: str | None = None) -> str:
    val = os.getenv(name, fallback)
    if val is None or str(val).strip() == "":
        raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {name}")
    return str(val).strip()

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ TELEGRAM_TOKEN, –∏ BOT_TOKEN (–≤–æ–∑—å–º—ë–º —á—Ç–æ –∑–∞–¥–∞–Ω–æ)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –∏–ª–∏ BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

# WEBHOOK_BASE_URL –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –∫–∞–∫:
# - –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É: https://hjr-bot-production.up.railway.app
# - –∏–ª–∏ –¥–æ–º–µ–Ω –±–µ–∑ —Å—Ö–µ–º—ã: hjr-bot-production.up.railway.app
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL")
if not WEBHOOK_BASE_URL:
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    WEBHOOK_BASE_URL = os.getenv("PUBLIC_URL") or os.getenv("RAILWAY_PUBLIC_DOMAIN")

if not WEBHOOK_BASE_URL or str(WEBHOOK_BASE_URL).strip().lower() in ("none", ""):
    raise RuntimeError(
        "–ù–µ –Ω–∞–π–¥–µ–Ω WEBHOOK_BASE_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. "
        "–£–∫–∞–∂–∏ –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω Railway, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://hjr-bot-production.up.railway.app"
    )

WEBHOOK_BASE_URL = WEBHOOK_BASE_URL.strip().rstrip("/")
if not WEBHOOK_BASE_URL.startswith("http://") and not WEBHOOK_BASE_URL.startswith("https://"):
    WEBHOOK_BASE_URL = "https://" + WEBHOOK_BASE_URL

# –ò—Ç–æ–≥–æ–≤—ã–π URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"{WEBHOOK_BASE_URL}/webhook/{TELEGRAM_TOKEN}"

# -------- TELEBOT + FLASK --------
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")
app = Flask(__name__)

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ‚Äî –æ—Å—Ç–∞–≤—å —Å–≤–æ–∏ –≤–Ω—É—Ç—Ä–∏
@bot.message_handler(commands=["start", "help"])
def on_start(message):
    bot.reply_to(message, "–ë–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ üîî")

@bot.message_handler(func=lambda _msg: True, content_types=["text"])
def echo(message):
    bot.send_message(message.chat.id, f"–≠—Ö–æ: {message.text}")

# –í–µ–±—Ö—É–∫-—Ä–æ—É—Ç. Telegram –±—É–¥–µ—Ç –±–∏—Ç—å —Å—é–¥–∞.
@app.post(f"/webhook/{TELEGRAM_TOKEN}")
def telegram_webhook():
    if request.headers.get("content-type") != "application/json":
        abort(400)
    update = telebot.types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "ok", 200

# –•–µ–ª—Å—á–µ–∫–∏
@app.get("/")
def root():
    return "OK", 200

@app.get("/healthz")
def health():
    return "healthy", 200

def ensure_webhook_once():
    """
    –°—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    –ë–µ–∑ —Å–ø–∞–º–∞ –∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ URL, –µ—Å–ª–∏ –æ–Ω –¥—Ä—É–≥–æ–π.
    """
    info = bot.get_webhook_info()
    if info and getattr(info, "url", "") == WEBHOOK_URL:
        log.info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)
        return

    log.info("–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π webhook...")
    try:
        bot.delete_webhook(drop_pending_updates=True)
        time.sleep(0.5)
    except Exception as e:
        log.warning("delete_webhook: %s", e)

    log.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–æ–≤—ã–π webhook ‚Üí %s", WEBHOOK_URL)
    # drop_pending_updates=True —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å —Å—Ç–∞—Ä—É—é –æ—á–µ—Ä–µ–¥—å polling
    bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)

# –í–ê–ñ–ù–û: —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑.
# –í Procfile –Ω–∏–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ -w 1, —Ç–∞–∫ —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω.
ensure_webhook_once()

# –û–±—ä–µ–∫—Ç app –Ω—É–∂–µ–Ω gunicorn'—É: main:app
# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –Ω–∞–¥–æ): python main.py
if __name__ == "__main__":
    port = int(os.getenv("PORT", "8080"))
    app.run(host="0.0.0.0", port=port)