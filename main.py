# -*- coding: utf-8 -*-
"""
main.py ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram + Flask

–†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ–¥ gunicorn: –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–æ—Ä–∫–µ—Ä–∞,
–Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç set_webhook —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º demon-–ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É.
"""
import os
import time
import logging
from threading import Thread
from typing import Optional

from flask import Flask, request, abort
import telebot

# -------- –õ–û–ì–ò --------
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("hjr-bot")

# -------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø --------
# TELEGRAM_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî –±–µ–∑ –Ω–µ–≥–æ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –∏–ª–∏ BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

# WEBHOOK_BASE_URL ‚Äî –¥–µ–ª–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º: –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –º—ã –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Å—Ç–∞–≤–∏—Ç—å webhook.
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL") or os.getenv("PUBLIC_URL") or os.getenv("RAILWAY_PUBLIC_DOMAIN")
if WEBHOOK_BASE_URL:
    WEBHOOK_BASE_URL = WEBHOOK_BASE_URL.strip().rstrip("/")
    if not WEBHOOK_BASE_URL.startswith("http://") and not WEBHOOK_BASE_URL.startswith("https://"):
        WEBHOOK_BASE_URL = "https://" + WEBHOOK_BASE_URL
    WEBHOOK_URL = f"{WEBHOOK_BASE_URL}/webhook/{TELEGRAM_TOKEN}"
else:
    WEBHOOK_URL = None
    log.warning("WEBHOOK_BASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω; webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

# -------- TELEBOT + FLASK --------
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")
app = Flask(__name__)

# Lockfile –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
LOCKFILE = "/tmp/hjr_set_webhook.lock"


# ----------------- handlers (–ø—Ä–∏–º–µ—Ä) -----------------
@bot.message_handler(commands=["start", "help"])
def on_start(message):
    bot.reply_to(message, "–ë–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ üîî")


@bot.message_handler(func=lambda _msg: True, content_types=["text"])
def echo(message):
    bot.send_message(message.chat.id, f"–≠—Ö–æ: {message.text}")


# ----------------- webhook route -----------------
@app.post(f"/webhook/{TELEGRAM_TOKEN}")
def telegram_webhook():
    # Telegram –ø–æ—Å—ã–ª–∞–µ—Ç application/json
    if request.headers.get("content-type") != "application/json":
        abort(400)
    update = telebot.types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "ok", 200


# Health endpoints
@app.get("/")
def root():
    return "OK", 200


@app.get("/healthz")
def health():
    return "healthy", 200


# ----------------- ensure_webhook logic -----------------
def _get_current_webhook_info() -> Optional[object]:
    try:
        return bot.get_webhook_info()
    except Exception as e:
        log.warning("get_webhook_info failed: %s", e)
        return None


def ensure_webhook_once():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –Ω–∞ WEBHOOK_URL (–µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω).
    –í—ã–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏–ª–∏ –ø—Ä–∏ —è–≤–Ω–æ–º –∑–∞–ø—É—Å–∫–µ.
    """
    if not WEBHOOK_URL:
        log.info("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞.")
        return

    info = _get_current_webhook_info()
    current_url = getattr(info, "url", "") if info is not None else ""

    if current_url == WEBHOOK_URL:
        log.info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)
        return

    log.info("–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –±—ã–ª)...")
    try:
        bot.delete_webhook(drop_pending_updates=True)
        time.sleep(0.3)
    except Exception as e:
        log.warning("delete_webhook error (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º): %s", e)

    log.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–æ–≤—ã–π webhook ‚Üí %s", WEBHOOK_URL)
    try:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ –≤ —Ñ–æ–Ω–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç)
        bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
        log.info("set_webhook: ok")
    except Exception as e:
        log.exception("set_webhook failed: %s", e)
        raise


def ensure_webhook_once_safe():
    """
    –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤: atomic create lockfile (mode='x').
    –ï—Å–ª–∏ lockfile —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç/–≤—ã–ø–æ–ª–Ω–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É.
    """
    if not WEBHOOK_URL:
        return

    try:
        # –ø–æ–ø—ã—Ç–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ —Å–æ–∑–¥–∞—Ç—å lockfile
        try:
            with open(LOCKFILE, "x"):
                pass
            created = True
        except FileExistsError:
            created = False

        if not created:
            log.info("Lockfile –æ–±–Ω–∞—Ä—É–∂–µ–Ω; –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞ –≤ —ç—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.")
            return

        # –≤—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        ensure_webhook_once()
    except Exception as e:
        log.exception("ensure_webhook_once_safe error: %s", e)
    # intentionally do not remove lockfile to avoid race on repeated restarts;
    # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª—è—Ç—å ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫:
    # try:
    #     os.remove(LOCKFILE)
    # except Exception:
    #     pass


def _delayed_startup_hook(delay_seconds: float = 1.0):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∂–¥—ë—Ç –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∑–∞—Ç–µ–º –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å webhook.
    –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∫ daemon thread –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç).
    """
    try:
        time.sleep(delay_seconds)
        log.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)...")
        ensure_webhook_once_safe()
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: %s", e)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –¥–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ‚Äî –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ —Å—Ç–∞—Ä—Ç–∞
t = Thread(target=_delayed_startup_hook, args=(1.0,), daemon=True)
t.start()


# ----------------- –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ / gunicorn -----------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", "8080"))
    app.run(host="0.0.0.0", port=port)