# -*- coding: utf-8 -*-
import logging
from datetime import datetime, timedelta
import appealManager
from .telegram_helpers import validate_appeal_link
from .council_helpers import resolve_council_id

log = logging.getLogger("hjr-bot.review_flow")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ID —á–∞—Ç–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
REVIEW_STATE_WAITING_POLL = "review_state_waiting_poll_for_chat"
# –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –õ–°, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
REVIEW_STATE_WAITING_ARG = "review_state_waiting_arg_for_user"

def register_review_handlers(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ü–ï–†–ï–°–ú–û–¢–†–ê –≤–µ—Ä–¥–∏–∫—Ç–∞ –ò–ò.
    """
    @bot.message_handler(commands=['recase'])
    def handle_recase(message):
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –°–æ–≤–µ—Ç–∞
        if message.chat.type not in ['group', 'supergroup']:
            bot.reply_to(message, "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –°–æ–≤–µ—Ç–∞.")
            return

        council_id = resolve_council_id()
        if message.chat.id != council_id:
            bot.reply_to(message, "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —á–∞—Ç–µ –°–æ–≤–µ—Ç–∞ –†–µ–¥–∞–∫—Ç–æ—Ä–æ–≤.")
            return

        user_id = message.from_user.id
        is_editor = appealManager.is_user_an_editor(bot, user_id, council_id)
        if not is_editor:
            return

        parts = message.text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/recase <–Ω–æ–º–µ—Ä_–¥–µ–ª–∞>`")
            return

        case_id = int(parts[1])
        appeal = appealManager.get_appeal(case_id)

        if not appeal:
            bot.reply_to(message, f"–î–µ–ª–æ #{case_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        if appeal.get("status") != 'closed':
            bot.reply_to(message, f"–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –¥–µ–ª.")
            return
        if appeal.get("is_reviewed"):
            bot.reply_to(message, "–≠—Ç–æ –¥–µ–ª–æ —É–∂–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–Ω–æ.")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ß–ê–¢–ê, —á—Ç–æ–±—ã –±–æ—Ç –∂–¥–∞–ª —Å—Å—ã–ª–∫—É –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å
        chat_state_key = f"chat_{message.chat.id}"
        data = {"case_id": case_id, "initiator_id": user_id}
        appealManager.set_user_state(chat_state_key, REVIEW_STATE_WAITING_POLL, data)
        log.info(f"[REVIEW] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {REVIEW_STATE_WAITING_POLL} –¥–ª—è —á–∞—Ç–∞: {message.chat.id}")

        # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ
        bot.reply_to(message, f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –¥–µ–ª–∞ ‚Ññ{case_id}. –û–∂–∏–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –°–æ–≤–µ—Ç–∞ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É.")

    @bot.message_handler(commands=['replyrecase'])
    def handle_reply_recase(message):
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°
        if message.chat.type != 'private':
            bot.reply_to(message, "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            return

        user_id = message.from_user.id
        is_editor = appealManager.is_user_an_editor(bot, user_id, resolve_council_id())
        if not is_editor:
            return

        parts = message.text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/replyrecase <–Ω–æ–º–µ—Ä_–¥–µ–ª–∞>`")
            return

        case_id = int(parts[1])
        appeal = appealManager.get_appeal(case_id)
        if not appeal or appeal.get("status") != 'reviewing':
            bot.reply_to(message, f"–î–µ–ª–æ #{case_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞.")
            return

        data = {"case_id": case_id}
        appealManager.set_user_state(user_id, REVIEW_STATE_WAITING_ARG, data)
        bot.send_message(message.chat.id, f"–ò–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –¥–µ–ª—É ‚Ññ{case_id}.")

    # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π "—Å–ª—É—à–∞–µ—Ç" —Å—Å—ã–ª–∫–∏ –¢–û–õ–¨–ö–û –≤ —á–∞—Ç–µ, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ /recase
    @bot.message_handler(
        func=lambda message: (
                message.chat.type in ['group', 'supergroup'] and
                appealManager.get_user_state(f"chat_{message.chat.id}") is not None and
                "t.me/" in message.text
        ),
        content_types=['text']
    )
    def handle_review_poll_link(message):
        chat_id_key = f"chat_{message.chat.id}"
        state_data = appealManager.get_user_state(chat_id_key)

        # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if state_data.get("state") != REVIEW_STATE_WAITING_POLL:
            return

        case_id = state_data.get("data", {}).get("case_id")
        log.info(f"[REVIEW_FSM] –í —á–∞—Ç–µ {message.chat.id} –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –¥–µ–ª–∞ #{case_id}")

        is_valid, result = validate_appeal_link(bot, message.text, user_chat_id=message.chat.id)
        if not is_valid:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {result}")
            return

        if result.get("type") != "poll":
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –ü—Ä–∏—Å–ª–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–µ –Ω–∞ –æ–ø—Ä–æ—Å.")
            return

        poll_data = result.get("poll", {})
        question = poll_data.get("question", "").lower()

        if "–ø–µ—Ä–µ—Å–º–æ—Ç—Ä" not in question or str(case_id) not in question:
            bot.reply_to(message, f"–¢–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–ª—É ‚Ññ{case_id} –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ '–ø–µ—Ä–µ—Å–º–æ—Ç—Ä'.")
            return

        options = poll_data.get("options", [])
        for_votes = 0
        for opt in options:
            if "–∑–∞" in opt.get("text", "").lower():
                for_votes = opt.get("voter_count", 0)

        if for_votes <= (poll_data.get("total_voter_count", 0) / 2):
            bot.reply_to(message, "–†–µ—à–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤.")
            appealManager.delete_user_state(chat_id_key) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
            return

        log.info(f"[REVIEW_FSM] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –¥–µ–ª–∞ #{case_id} –ø—Ä–æ–π–¥–µ–Ω—ã.")
        appealManager.update_appeal(case_id, "status", "reviewing")
        appealManager.update_appeal(case_id, "is_reviewed", True)

        review_data = {"poll": poll_data}
        appealManager.update_appeal(case_id, "review_data", review_data)

        expires_at = datetime.utcnow() + timedelta(hours=24)
        appealManager.update_appeal(case_id, "timer_expires_at", expires_at)

        bot.reply_to(message, f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –¥–µ–ª—É ‚Ññ{case_id} –ø—Ä–∏–Ω—è—Ç–æ. –ù–∞—á–∞–ª—Å—è 24-—á–∞—Å–æ–≤–æ–π —Å–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")

        appeal = appealManager.get_appeal(case_id)
        thread_id = appeal.get("message_thread_id")
        bot.send_message(message.chat.id, f"üì£ –ß–ª–µ–Ω—ã –°–æ–≤–µ—Ç–∞ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/replyrecase {case_id}` –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.", message_thread_id=thread_id)
        appealManager.delete_user_state(chat_id_key)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –õ–°
    @bot.message_handler(
        func=lambda message: (
                appealManager.get_user_state(message.from_user.id) is not None and
                str(appealManager.get_user_state(message.from_user.id).get('state', '')) == REVIEW_STATE_WAITING_ARG
        ),
        content_types=['text']
    )
    def handle_review_argument_fsm(message):
        user_id = message.from_user.id
        state_data = appealManager.get_user_state(user_id)
        case_id = state_data.get("data", {}).get("case_id")

        if not appealManager.are_arguments_meaningful(message.text):
            bot.reply_to(message, "–í–∞—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.")
            return

        appeal = appealManager.get_appeal(case_id)
        review_data = appeal.get("review_data", {}) or {}
        new_args = review_data.get("new_arguments", [])

        author_info = f"{message.from_user.first_name} (@{message.from_user.username or '—Å–∫—Ä—ã—Ç–æ'})"
        new_args.append({"author": author_info, "argument": message.text})

        review_data["new_arguments"] = new_args
        appealManager.update_appeal(case_id, "review_data", review_data)
        log.info(f"[REVIEW_FSM] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫ –¥–µ–ª—É #{case_id}.")
        bot.send_message(message.chat.id, f"–í–∞—à–∏ –Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –¥–µ–ª—É ‚Ññ{case_id} –ø—Ä–∏–Ω—è—Ç—ã.")
        appealManager.delete_user_state(user_id)