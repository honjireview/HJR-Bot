# -*- coding: utf-8 -*-
import logging
from datetime import datetime, timedelta
import appealManager
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫, –∞ –Ω–µ –≤–µ—Å—å applicant_flow
from .telegram_helpers import validate_appeal_link
from .council_helpers import resolve_council_id

log = logging.getLogger("hjr-bot.review_flow")

REVIEW_STATE_PREFIX = "review_"
ReviewStates = {
    "WAITING_POLL": f"{REVIEW_STATE_PREFIX}waiting_poll",
    "WAITING_ARG": f"{REVIEW_STATE_PREFIX}waiting_arg",
}

def register_review_handlers(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ü–ï–†–ï–°–ú–û–¢–†–ê –≤–µ—Ä–¥–∏–∫—Ç–∞ –ò–ò.
    """
    @bot.message_handler(commands=['recase'], chat_types=['private'])
    def handle_recase(message):
        user_id = message.from_user.id
        log.info(f"[REVIEW] –ö–æ–º–∞–Ω–¥–∞ /recase –æ—Ç user_id: {user_id}")
        is_editor = appealManager.is_user_an_editor(bot, user_id, resolve_council_id())
        if not is_editor:
            log.warning(f"[REVIEW] User {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º. –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return

        parts = message.text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/recase <–Ω–æ–º–µ—Ä_–¥–µ–ª–∞>`")
            return

        case_id = int(parts[1])
        log.info(f"[REVIEW] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –¥–µ–ª–∞ #{case_id}")
        appeal = appealManager.get_appeal(case_id)

        if not appeal:
            log.warning(f"[REVIEW] –î–µ–ª–æ #{case_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            bot.reply_to(message, f"–î–µ–ª–æ #{case_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        if appeal.get("status") != 'closed':
            log.warning(f"[REVIEW] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –¥–µ–ª–∞ #{case_id} —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: {appeal.get('status')}")
            bot.reply_to(message, f"–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'closed'. –°—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –¥–µ–ª–∞: '{appeal.get('status')}'.")
            return
        if appeal.get("is_reviewed"):
            log.warning(f"[REVIEW] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –¥–µ–ª–∞ #{case_id}.")
            bot.reply_to(message, "–≠—Ç–æ –¥–µ–ª–æ —É–∂–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return

        data = {"case_id": case_id}
        appealManager.set_user_state(user_id, ReviewStates["WAITING_POLL"], data)
        log.info(f"[REVIEW] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {ReviewStates['WAITING_POLL']} –¥–ª—è user_id: {user_id}, case_id: {case_id}")
        bot.send_message(message.chat.id, f"–í—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –¥–µ–ª–∞ ‚Ññ{case_id}.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –°–æ–≤–µ—Ç–∞, –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ.")

    @bot.message_handler(commands=['replyrecase'], chat_types=['private'])
    def handle_reply_recase(message):
        user_id = message.from_user.id
        log.info(f"[REVIEW] –ö–æ–º–∞–Ω–¥–∞ /replyrecase –æ—Ç user_id: {user_id}")
        is_editor = appealManager.is_user_an_editor(bot, user_id, resolve_council_id())
        if not is_editor:
            return

        parts = message.text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/replyrecase <–Ω–æ–º–µ—Ä_–¥–µ–ª–∞>`")
            return

        case_id = int(parts[1])
        log.info(f"[REVIEW] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –∫ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä—É –¥–µ–ª–∞ #{case_id}")
        appeal = appealManager.get_appeal(case_id)
        if not appeal or appeal.get("status") != 'reviewing':
            log.warning(f"[REVIEW] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç –∫ –¥–µ–ª—É #{case_id}, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞.")
            bot.reply_to(message, f"–î–µ–ª–æ #{case_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞.")
            return

        data = {"case_id": case_id}
        appealManager.set_user_state(user_id, ReviewStates["WAITING_ARG"], data)
        log.info(f"[REVIEW] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {ReviewStates['WAITING_ARG']} –¥–ª—è user_id: {user_id}, case_id: {case_id}")
        bot.send_message(message.chat.id, f"–ò–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ –¥–µ–ª—É ‚Ññ{case_id}, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —É—á—Ç–µ–Ω—ã –≤ –ø–µ—Ä–≤–æ–º –≤–µ—Ä–¥–∏–∫—Ç–µ.")

    @bot.message_handler(
        func=lambda message: (
                appealManager.get_user_state(message.from_user.id) is not None and
                str(appealManager.get_user_state(message.from_user.id).get('state', '')).startswith(REVIEW_STATE_PREFIX)
        ),
        content_types=['text']
    )
    def handle_review_fsm(message):
        user_id = message.from_user.id
        state_data = appealManager.get_user_state(user_id)
        state = state_data.get("state")
        data = state_data.get("data", {})
        case_id = data.get("case_id")
        log.info(f"[REVIEW_FSM] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è {state} –¥–ª—è user_id: {user_id}, case_id: {case_id}")

        if state == ReviewStates["WAITING_POLL"]:
            log.debug(f"[REVIEW_FSM] –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø—Ä–æ—Å –æ—Ç user_id: {user_id}")
            is_valid, result = validate_appeal_link(bot, message.text, user_chat_id=message.chat.id)
            if not is_valid:
                bot.reply_to(message, f"–û—à–∏–±–∫–∞: {result}")
                return

            if result.get("type") != "poll":
                log.warning(f"[REVIEW_FSM] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–ª–∞–ª —Å—Å—ã–ª–∫—É –Ω–µ –Ω–∞ –æ–ø—Ä–æ—Å.")
                bot.reply_to(message, "–û—à–∏–±–∫–∞: –ü—Ä–∏—Å–ª–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–µ –Ω–∞ –æ–ø—Ä–æ—Å.")
                return

            poll_data = result.get("poll", {})
            question = poll_data.get("question", "").lower()

            log.debug(f"[REVIEW_FSM] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–ø—Ä–æ—Å–∞: '{question}' –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ '–ø–µ—Ä–µ—Å–º–æ—Ç—Ä' –∏ '{case_id}'")
            if "–ø–µ—Ä–µ—Å–º–æ—Ç—Ä" not in question or str(case_id) not in question:
                log.warning(f"[REVIEW_FSM] –¢–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –¥–µ–ª–∞ #{case_id}.")
                bot.reply_to(message, f"–¢–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–ª—É ‚Ññ{case_id} –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ '–ø–µ—Ä–µ—Å–º–æ—Ç—Ä'. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                appealManager.delete_user_state(user_id)
                return

            options = poll_data.get("options", [])
            for_votes = 0
            for opt in options:
                if "–∑–∞" in opt.get("text", "").lower():
                    for_votes = opt.get("voter_count", 0)

            log.debug(f"[REVIEW_FSM] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {for_votes} '–ó–∞' –∏–∑ {poll_data.get('total_voter_count', 0)}.")
            if for_votes <= (poll_data.get("total_voter_count", 0) / 2):
                log.warning(f"[REVIEW_FSM] –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –¥–µ–ª—É #{case_id} –Ω–µ –Ω–∞–±—Ä–∞–ª–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞.")
                bot.reply_to(message, "–†–µ—à–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                appealManager.delete_user_state(user_id)
                return

            log.info(f"[REVIEW_FSM] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –¥–µ–ª–∞ #{case_id} –ø—Ä–æ–π–¥–µ–Ω—ã.")
            appealManager.update_appeal(case_id, "status", "reviewing")
            appealManager.update_appeal(case_id, "is_reviewed", True)

            review_data = {"poll": poll_data}
            appealManager.update_appeal(case_id, "review_data", review_data)

            expires_at = datetime.utcnow() + timedelta(hours=24)
            appealManager.update_appeal(case_id, "timer_expires_at", expires_at)

            bot.send_message(message.chat.id, f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –¥–µ–ª—É ‚Ññ{case_id} –ø—Ä–∏–Ω—è—Ç–æ. –ù–∞—á–∞–ª—Å—è 24-—á–∞—Å–æ–≤–æ–π —Å–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ—Ç —á–ª–µ–Ω–æ–≤ –°–æ–≤–µ—Ç–∞.")

            council_chat_id = resolve_council_id()
            appeal = appealManager.get_appeal(case_id)
            thread_id = appeal.get("message_thread_id")
            bot.send_message(council_chat_id, f"üì£ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä –¥–µ–ª–∞ ‚Ññ{case_id} –æ–¥–æ–±—Ä–µ–Ω –°–æ–≤–µ—Ç–æ–º. \n–ß–ª–µ–Ω—ã –°–æ–≤–µ—Ç–∞ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/replyrecase {case_id}` –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.", message_thread_id=thread_id)
            appealManager.delete_user_state(user_id)

        elif state == ReviewStates["WAITING_ARG"]:
            if not appealManager.are_arguments_meaningful(message.text):
                bot.reply_to(message, "–í–∞—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.")
                return

            appeal = appealManager.get_appeal(case_id)
            review_data = appeal.get("review_data", {}) or {}
            new_args = review_data.get("new_arguments", [])

            author_info = f"{message.from_user.first_name} (@{message.from_user.username or '—Å–∫—Ä—ã—Ç–æ'})"
            new_args.append({
                "author": author_info,
                "argument": message.text
            })

            review_data["new_arguments"] = new_args
            appealManager.update_appeal(case_id, "review_data", review_data)
            log.info(f"[REVIEW_FSM] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫ –¥–µ–ª—É #{case_id}.")
            bot.send_message(message.chat.id, f"–í–∞—à–∏ –Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –¥–µ–ª—É ‚Ññ{case_id} –ø—Ä–∏–Ω—è—Ç—ã.")
            appealManager.delete_user_state(user_id)