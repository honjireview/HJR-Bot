# -*- coding: utf-8 -*-

import telebot
from telebot import types
import random
import os
import pandas as pd
import io
import re
import logging
from datetime import datetime, timedelta

import appealManager
from .council_flow import finalize_appeal

# Railway „ÅÆÁí∞Â¢ÉÂ§âÊï∞: „Éó„É©„Ç§„Éô„Éº„Éà„Ç∞„É´„Éº„ÉóÔºàË©ïË≠∞‰ºöÔºâ„ÅÆ chat_idÔºà‰æã: -100xxxxxxxxxxÔºâ
EDITORS_CHANNEL_ID = os.getenv('EDITORS_CHANNEL_ID')
# Ê§úË®ºÂØæË±°„ÅÆ„ÉÅ„É£„ÉÉ„ÉàID„ÅØ EDITORS_CHANNEL_ID „Çí‰ΩøÁî®
COUNCIL_CHAT_ID = EDITORS_CHANNEL_ID

log = logging.getLogger("hjr-bot")

def register_applicant_handlers(bot, user_states):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏.
    """

    # --- „Éò„É´„Éë: „É°„ÉÉ„Çª„Éº„Ç∏„É™„É≥„ÇØ„ÇíËß£Êûê„Åó„Å¶ from_chat_id „Å® message_id „ÇíÂæó„Çã ---
    def _parse_message_link(text: str):
        # 1) „Éà„Éî„ÉÉ„ÇØ‰ªò„Åç: t.me/c/<internal>/<topic_id>/<message_id>
        m = re.search(r'(?:https?://)?t\.me/c/(\d+)/(\d+)/(\d+)', txt)
        if m:
            internal = int(m.group(1))
            topic_id = int(m.group(2))
            msg_id = int(m.group(3))  # ÊúÄÂæå„Åå„É°„ÉÉ„Çª„Éº„Ç∏ID
            from_chat_id = int(f"-100{internal}")
            log.info(f"[link-parse] topic link parsed: internal={internal}, topic_id={topic_id}, message_id={msg_id}, chat_id={from_chat_id}")
            return from_chat_id, msg_id

        # 2) ÈÄöÂ∏∏: t.me/c/<internal>/<message_id>
        m = re.search(r'(?:https?://)?t\.me/c/(\d+)/(\d+)', txt)
        if m:
            internal = int(m.group(1))
            msg_id = int(m.group(2))
            from_chat_id = int(f"-100{internal}")
            log.info(f"[link-parse] c-link parsed: internal={internal}, message_id={msg_id}, chat_id={from_chat_id}")
            return from_chat_id, msg_id

        # 3) „Éë„Éñ„É™„ÉÉ„ÇØ: t.me/<username>/<message_id>
        m = re.search(r'(?:https?://)?t\.me/([A-Za-z0-9_]{5,})/(\d+)', txt)
        if m:
            username = m.group(1)
            msg_id = int(m.group(2))
            try:
                chat = bot.get_chat(f"@{username}")
                log.info(f"[link-parse] public link parsed: username={username}, message_id={msg_id}, chat_id={chat.id}")
                return chat.id, msg_id
            except Exception as e:
                log.warning(f"[link-parse] failed to resolve public chat @{username}: {e}")
                return None

        log.info("[link-parse] no link detected or unsupported format")
        return None

    # --- –®–∞–≥ 1: –ù–∞—á–∞–ª–æ ---
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        user_states.pop(message.from_user.id, None)
        markup = types.InlineKeyboardMarkup()
        appeal_button = types.InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é", callback_data="start_appeal")
        markup.add(appeal_button)
        bot.send_message(
            message.chat.id,
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ Honji Review. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.",
            reply_markup=markup
        )

    # ‰ªªÊÑè: ÈÄî‰∏≠„Ç≠„É£„É≥„Çª„É´
    @bot.message_handler(commands=['cancel'])
    def cancel_process(message):
        if user_states.pop(message.from_user.id, None) is not None:
            bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=types.ReplyKeyboardRemove())

    @bot.callback_query_handler(func=lambda call: call.data == "start_appeal")
    def handle_start_appeal_callback(call):
        user_id = call.from_user.id
        user_states[user_id] = {'state': 'collecting_items', 'items': []}
        markup = types.InlineKeyboardMarkup()
        done_button = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ, —è –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)", callback_data="done_collecting")
        markup.add(done_button)
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (t.me/...) –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –°–æ–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å. "
            "–û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ /cancel",
            reply_markup=markup
        )

    # --- –®–∞–≥ 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
    @bot.callback_query_handler(func=lambda call: call.data == "done_collecting")
    def handle_done_collecting_callback(call):
        user_id = call.from_user.id
        state_data = user_states.get(user_id)
        if not state_data or not state_data.get('items'):
            bot.answer_callback_query(call.id, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.", show_alert=True)
            return
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        process_collected_items(bot, call.message, user_states)

    def process_collected_items(bot, message, user_states):
        user_id = message.chat.id
        state_data = user_states.get(user_id)
        if not state_data:
            return

        full_decision_text, all_voters_to_mention, total_voters, poll_count = "", [], None, 0
        for item in state_data['items']:
            if getattr(item, 'content_type', '') == 'poll':
                poll_count += 1
                poll = item.poll
                total_voters = poll.total_voter_count
                options_text = "\n".join([f"- {opt.text}: {opt.voter_count} –≥–æ–ª–æ—Å–æ–≤" for opt in poll.options])
                full_decision_text += f"\n\n--- –û–ø—Ä–æ—Å ---\n–í–æ–ø—Ä–æ—Å: {poll.question}\n{options_text}"
            elif getattr(item, 'content_type', '') == 'text':
                full_decision_text += f"\n\n--- –°–æ–æ–±—â–µ–Ω–∏–µ ---\n{item.text}"
            elif getattr(item, 'content_type', '') == 'document' and item.document.mime_type == 'text/csv':
                try:
                    file_info = bot.get_file(item.document.file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    df = pd.read_csv(io.BytesIO(downloaded_file))
                    try:
                        rendered = df.to_markdown(index=False)  # –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å tabulate
                    except Exception:
                        rendered = df.to_csv(index=False)
                    full_decision_text += "\n\n--- –î–∞–Ω–Ω—ã–µ –∏–∑ Google Forms (CSV) ---\n" + rendered
                    mention_col = 'Username' if 'Username' in df.columns else 'UserID' if 'UserID' in df.columns else None
                    if mention_col:
                        all_voters_to_mention.extend(df[mention_col].dropna().astype(str).tolist())
                except Exception as e:
                    bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV: {e}. –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")

        if poll_count > 1:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í—ã –º–æ–∂–µ—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–∞–∑. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            user_states.pop(user_id, None)
            return

        case_id = random.randint(10000, 99999)
        user_states[user_id]['case_id'] = case_id
        initial_data = {
            'applicant_chat_id': message.chat.id,
            'decision_text': full_decision_text.strip(),
            'voters_to_mention': list(set(all_voters_to_mention)),
            'total_voters': total_voters,
            'status': 'collecting'
        }
        appealManager.create_appeal(case_id, initial_data)
        bot.send_message(message.chat.id, f"–í—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –í–∞—à–µ–º—É –¥–µ–ª—É –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä #{case_id}.")

        if poll_count == 1:
            user_states[user_id]['state'] = 'awaiting_vote_response'
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("–î–∞, —è –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"), types.KeyboardButton("–ù–µ—Ç, —è –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"))
            bot.send_message(message.chat.id, "–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –≤—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏?", reply_markup=markup)
        else:
            user_states[user_id]['state'] = 'awaiting_main_argument'
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.")

    def request_counter_arguments(bot, case_id):
        appeal = appealManager.get_appeal(case_id)
        if not appeal:
            return

        request_text = f"""
üì£ **–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}** üì£

**–ó–∞—è–≤–∏—Ç–µ–ª—å –æ—Å–ø–∞—Ä–∏–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ:**
`{appeal['decision_text']}`

**–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è:**
`{appeal.get('applicant_arguments', '')}`
"""
        if appeal.get('voters_to_mention'):
            mentions = " ".join([f"@{str(v).replace('@', '')}" for v in appeal['voters_to_mention']])
            request_text += f"\n\n–ü—Ä–æ—à—É —Å–ª–µ–¥—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {mentions} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã."
        else:
            request_text += f"\n\n–ü—Ä–æ—à—É –°–æ–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é."
        request_text += f"\n\n–£ –≤–∞—Å –µ—Å—Ç—å 24 —á–∞—Å–∞. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/reply {case_id}` –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."

        try:
            if EDITORS_CHANNEL_ID:
                bot.send_message(EDITORS_CHANNEL_ID, request_text, parse_mode="Markdown")
            else:
                print("EDITORS_CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ EDITORS_CHANNEL_ID: {e}")

        expires_at = datetime.utcnow() + timedelta(hours=24)
        appealManager.update_appeal(case_id, 'timer_expires_at', expires_at)
        print(f"–¢–∞–π–º–µ—Ä –¥–ª—è –¥–µ–ª–∞ #{case_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {expires_at.isoformat()}")

    # Áî≥Ë´ãËÄÖ„Éè„É≥„Éâ„É©ÔºàcouncilÁä∂ÊÖã„ÅØÈô§Â§ñÔºâ
    @bot.message_handler(
        func=lambda message: (
                user_states.get(message.from_user.id) is not None
                and not str(user_states.get(message.from_user.id, {}).get('state', '')).startswith('awaiting_council_')
        ),
        content_types=['text', 'poll', 'document']
    )
    def handle_dialogue_messages(message):
        user_id = message.from_user.id
        state_data = user_states.get(user_id)
        if not state_data: return

        state = state_data.get('state')
        case_id = state_data.get('case_id')

        if state == 'collecting_items':
            is_forwarded = message.forward_from or message.forward_from_chat
            is_document = message.content_type == 'document'
            is_poll = message.content_type == 'poll'

            if is_forwarded:
                bot.send_message(
                    message.chat.id,
                    "–û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (t.me/...) –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –°–æ–≤–µ—Ç–∞."
                )
                return

            if message.content_type == 'text':
                parsed = _parse_message_link(message.text)
                if parsed:
                    from_chat_id, msg_id = parsed
                    # EDITORS_CHANNEL_ID „Å®‰∏ÄËá¥ÂøÖÈ†à
                    if COUNCIL_CHAT_ID and str(from_chat_id) != str(COUNCIL_CHAT_ID):
                        bot.send_message(
                            message.chat.id,
                            f"–°—Å—ã–ª–∫–∞ –≤–µ–¥–µ—Ç –Ω–µ –Ω–∞ –Ω–∞—à—É –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≥—Ä—É–ø–ø—É. –û–∂–∏–¥–∞–ª—Å—è —á–∞—Ç {COUNCIL_CHAT_ID}, "
                            f"–∞ –≤ —Å—Å—ã–ª–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–∞—Ç {from_chat_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É."
                        )
                        return
                    try:
                        fwd = bot.forward_message(
                            chat_id=message.chat.id,
                            from_chat_id=from_chat_id,
                            message_id=msg_id,
                            disable_notification=True
                        )
                        state_data['items'].append(fwd)
                        bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞ ({len(state_data['items'])}). –ü–µ—Ä–µ—à–ª–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
                        return
                    except Exception as e:
                        log.warning(f"[copy_message] failed: {e}")
                        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Å—ã–ª–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ –∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
                        return

            if is_document and message.document.mime_type == 'text/csv':
                state_data['items'].append(message)
                bot.send_message(message.chat.id, f"CSV –ø—Ä–∏–Ω—è—Ç ({len(state_data['items'])}). –ü–µ—Ä–µ—à–ª–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
                return

            if is_poll:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å (t.me/...), –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏ –ø—Ä—è–º—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")
                return

            if message.content_type == 'text':
                bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (t.me/...) –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –°–æ–≤–µ—Ç–∞ –∏–ª–∏ CSV-—Ñ–∞–π–ª.")
            return

        # --- ‰ª•Èôç„ÄÅË≥™ÁñëÂøúÁ≠î„Éï„É≠„Éº ---
        if state == 'awaiting_vote_response':
            appeal = appealManager.get_appeal(case_id)
            if not appeal:
                return
            if message.content_type == 'text' and message.text.startswith("–î–∞"):
                expected_responses = (appeal.get('total_voters') or 1) - 1
                appealManager.update_appeal(case_id, 'expected_responses', expected_responses)
                user_states[user_id]['state'] = 'awaiting_main_argument'
                bot.send_message(message.chat.id, "–ü–æ–Ω—è—Ç–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.", reply_markup=types.ReplyKeyboardRemove())
            elif message.content_type == 'text' and message.text.startswith("–ù–µ—Ç"):
                bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º, –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
                appealManager.delete_appeal(case_id)
                user_states.pop(user_id, None)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

        elif state == 'awaiting_main_argument':
            appealManager.update_appeal(case_id, 'applicant_arguments', message.text)
            user_states[user_id]['state'] = 'awaiting_q1'
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1/3: –ö–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—É–Ω–∫—Ç —É—Å—Ç–∞–≤–∞, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –±—ã–ª –Ω–∞—Ä—É—à–µ–Ω?")

        elif state == 'awaiting_q1':
            appeal = appealManager.get_appeal(case_id)
            if appeal:
                current_answers = appeal.get('applicant_answers', {}) or {}
                current_answers['q1'] = message.text
                appealManager.update_appeal(case_id, 'applicant_answers', current_answers)
            user_states[user_id]['state'] = 'awaiting_q2'
            bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 2/3: –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º?")

        elif state == 'awaiting_q2':
            appeal = appealManager.get_appeal(case_id)
            if appeal:
                current_answers = appeal.get('applicant_answers', {}) or {}
                current_answers['q2'] = message.text
                appealManager.update_appeal(case_id, 'applicant_answers', current_answers)
            user_states[user_id]['state'] = 'awaiting_q3'
            bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 3/3: –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–∞–∂–Ω—ã–π –¥–ª—è –¥–µ–ª–∞?")

        elif state == 'awaiting_q3':
            appeal = appealManager.get_appeal(case_id)
            if appeal:
                current_answers = appeal.get('applicant_answers', {}) or {}
                current_answers['q3'] = message.text
                appealManager.update_appeal(case_id, 'applicant_answers', current_answers)
            user_states.pop(user_id, None)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∑–∞—è–≤–∏—Ç–µ–ª–µ–º
            request_counter_arguments(bot, case_id)