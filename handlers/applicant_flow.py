# -*- coding: utf-8 -*-

import telebot
from telebot import types
import random
import os
import pandas as pd
import io
from datetime import datetime, timedelta
import threading

import appealManager
from .council_flow import finalize_appeal # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∞

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
EDITORS_CHANNEL_ID = os.getenv('EDITORS_CHANNEL_ID')

def register_applicant_handlers(bot, user_states):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏.
    """

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        user_states.pop(message.from_user.id, None)
        markup = types.InlineKeyboardMarkup()
        appeal_button = types.InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é", callback_data="start_appeal")
        markup.add(appeal_button)
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ Honji Review. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "start_appeal")
    def handle_start_appeal_callback(call):
        user_id = call.from_user.id
        user_states[user_id] = {'state': 'collecting_items', 'items': []}
        markup = types.InlineKeyboardMarkup()
        done_button = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ, —è –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)", callback_data="done_collecting")
        markup.add(done_button)
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–µ—Ä–µ—à–ª–∏—Ç–µ** —Å—é–¥–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–ø—Ä–æ—Å—ã –∏–ª–∏ CSV-—Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ /cancel", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "done_collecting")
    def handle_done_collecting_callback(call):
        user_id = call.from_user.id
        state_data = user_states.get(user_id)
        if not state_data or not state_data.get('items'):
            bot.answer_callback_query(call.id, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.", show_alert=True)
            return
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        process_collected_items(bot, call.message, user_states)

    def process_collected_items(bot, message, user_states):
        user_id = message.chat.id
        state_data = user_states.get(user_id)
        if not state_data: return

        full_decision_text, all_voters_to_mention, total_voters, poll_count = "", [], None, 0
        for item in state_data['items']:
            if item.content_type == 'poll':
                poll_count += 1
                poll = item.poll
                total_voters = poll.total_voter_count
                options_text = "\n".join([f"- {opt.text}: {opt.voter_count} –≥–æ–ª–æ—Å–æ–≤" for opt in poll.options])
                full_decision_text += f"\n\n--- –û–ø—Ä–æ—Å ---\n–í–æ–ø—Ä–æ—Å: {poll.question}\n{options_text}"
            elif item.content_type == 'text':
                full_decision_text += f"\n\n--- –°–æ–æ–±—â–µ–Ω–∏–µ ---\n{item.text}"
            elif item.content_type == 'document' and item.document.mime_type == 'text/csv':
                try:
                    file_info = bot.get_file(item.document.file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    df = pd.read_csv(io.BytesIO(downloaded_file))
                    full_decision_text += "\n\n--- –î–∞–Ω–Ω—ã–µ –∏–∑ Google Forms (CSV) ---\n" + df.to_markdown(index=False)
                    mention_col = 'Username' if 'Username' in df.columns else 'UserID' if 'UserID' in df.columns else None
                    if mention_col: all_voters_to_mention.extend(df[mention_col].dropna().tolist())
                except Exception as e:
                    bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV: {e}. –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")

        if poll_count > 1:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í—ã –º–æ–∂–µ—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–∞–∑. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            user_states.pop(user_id, None)
            return

        case_id = random.randint(10000, 99999)
        user_states[user_id]['case_id'] = case_id
        initial_data = {
            'applicant_chat_id': message.chat.id, 'decision_text': full_decision_text.strip(),
            'voters_to_mention': list(set(all_voters_to_mention)), 'total_voters': total_voters, 'status': 'collecting'
        }
        appealManager.create_appeal(case_id, initial_data)
        bot.send_message(message.chat.id, f"–í—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –í–∞—à–µ–º—É –¥–µ–ª—É –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä #{case_id}.")

        if poll_count == 1:
            user_states[user_id]['state'] = 'awaiting_vote_response'
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("–î–∞, —è –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"), types.KeyboardButton("–ù–µ—Ç, —è –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"))
            bot.send_message(message.chat.id, "–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –≤—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏?", reply_markup=markup)
        else:
            user_states[user_id]['state'] = 'awaiting_main_argument'
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.")

    def request_counter_arguments(bot, case_id):
        appeal = appealManager.get_appeal(case_id)
        if not appeal: return

        request_text = f"üì£ **–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}** üì£\n\n..." # –¢–µ–∫—Å—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        bot.send_message(EDITORS_CHANNEL_ID, request_text, parse_mode="Markdown")

        expires_at = datetime.utcnow() + timedelta(hours=24)
        appealManager.update_appeal(case_id, 'timer_expires_at', expires_at)
        print(f"–¢–∞–π–º–µ—Ä –¥–ª—è –¥–µ–ª–∞ #{case_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {expires_at.isoformat()}")