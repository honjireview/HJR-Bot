# -*- coding: utf-8 -*-

import telebot
from telebot import types
import random
import os
import pandas as pd
import io
import logging
from datetime import datetime, timedelta

import appealManager
from .council_flow import finalize_appeal

EDITORS_CHANNEL_ID = os.getenv('EDITORS_CHANNEL_ID')
log = logging.getLogger("hjr-bot")

def register_applicant_handlers(bot, user_states):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏.
    """

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        user_states.pop(message.from_user.id, None)
        log.info(f"[dialog] /start user={message.from_user.id}")
        markup = types.InlineKeyboardMarkup()
        appeal_button = types.InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é", callback_data="start_appeal")
        markup.add(appeal_button)
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ Honji Review. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.", reply_markup=markup)

    @bot.message_handler(commands=['cancel'])
    def cancel_process(message):
        user_id = message.from_user.id
        state = user_states.pop(user_id, None)
        if state and 'case_id' in state:
            appealManager.delete_appeal(state['case_id'])
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())

    @bot.callback_query_handler(func=lambda call: call.data == "start_appeal")
    def handle_start_appeal_callback(call):
        user_id = call.from_user.id
        user_states[user_id] = {'state': 'collecting_items', 'items': []}
        log.info(f"[dialog] start_appeal user={user_id} state=collecting_items")
        markup = types.InlineKeyboardMarkup()
        done_button = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ, —è –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)", callback_data="done_collecting")
        markup.add(done_button)
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–µ—Ä–µ—à–ª–∏—Ç–µ** —Å—é–¥–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–ø—Ä–æ—Å—ã –∏–ª–∏ CSV-—Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ /cancel", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "done_collecting")
    def handle_done_collecting_callback(call):
        user_id = call.from_user.id
        state_data = user_states.get(user_id)
        if not state_data or not state_data.get('items'):
            bot.answer_callback_query(call.id, "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.", show_alert=True)
            return
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        process_collected_items(bot, user_id, call.message, user_states)

    def process_collected_items(bot, user_id, message, user_states):
        state_data = user_states.get(user_id)
        if not state_data: return

        full_decision_text, poll_count, total_voters = "", 0, None
        for item in state_data['items']:
            if item.content_type == 'poll':
                poll_count += 1
                poll = item.poll
                total_voters = poll.total_voter_count
                options_text = "\n".join([f"- {opt.text}: {opt.voter_count} –≥–æ–ª–æ—Å–æ–≤" for opt in poll.options])
                full_decision_text += f"\n\n--- –û–ø—Ä–æ—Å ---\n–í–æ–ø—Ä–æ—Å: {poll.question}\n{options_text}"
            elif item.content_type == 'text':
                full_decision_text += f"\n\n--- –°–æ–æ–±—â–µ–Ω–∏–µ ---\n{item.text}"

        if poll_count > 1:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í—ã –º–æ–∂–µ—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–∞–∑. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            user_states.pop(user_id, None)
            return

        case_id = random.randint(10000, 99999)
        user_states[user_id]['case_id'] = case_id
        initial_data = {'applicant_chat_id': message.chat.id, 'decision_text': full_decision_text.strip(), 'total_voters': total_voters, 'status': 'collecting'}
        appealManager.create_appeal(case_id, initial_data)
        bot.send_message(message.chat.id, f"–í—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –í–∞—à–µ–º—É –¥–µ–ª—É –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä #{case_id}.")

        if poll_count == 1:
            user_states[user_id]['state'] = 'awaiting_vote_response'
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("–î–∞, —è –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"), types.KeyboardButton("–ù–µ—Ç, —è –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"))
            bot.send_message(message.chat.id, "–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –≤—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏?", reply_markup=markup)
        else:
            user_states[user_id]['state'] = 'awaiting_main_argument'
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.")

    def request_counter_arguments(bot, case_id):
        appeal = appealManager.get_appeal(case_id)
        if not appeal: return

        request_text = f"üì£ **–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}** üì£\n\n..." # –¢–µ–∫—Å—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        bot.send_message(EDITORS_CHANNEL_ID, request_text, parse_mode="Markdown")

        expires_at = datetime.utcnow() + timedelta(hours=24)
        appealManager.update_appeal(case_id, 'timer_expires_at', expires_at)
        log.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –¥–µ–ª–∞ #{case_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {expires_at.isoformat()}")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–ø–µ–ª–ª—è—Ü–∏–µ–π
    @bot.message_handler(
        func=lambda message: str(user_states.get(message.from_user.id, {}).get('state', '')).startswith('awaiting_') or user_states.get(message.from_user.id, {}).get('state') == 'collecting_items',
        content_types=['text', 'poll', 'document']
    )
    def handle_dialogue_messages(message):
        user_id = message.from_user.id
        state_data = user_states.get(user_id)
        if not state_data: return

        state = state_data.get('state')
        case_id = state_data.get('case_id')

        if state == 'collecting_items':
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message.forward_from and not message.forward_from_chat:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–µ—Ä–µ—à–ª–∏—Ç–µ** –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return

            state_data['items'].append(message)
            log.info(f"[collect] accepted forwarded message, items={len(state_data['items'])}")
            bot.send_message(message.chat.id, f"–ü—Ä–∏–Ω—è—Ç–æ ({len(state_data['items'])}). –ü–µ—Ä–µ—à–ª–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
            return

        elif state == 'awaiting_vote_response':
            appeal = appealManager.get_appeal(case_id)
            if not appeal: return
            if message.text.startswith("–î–∞"):
                expected_responses = (appeal.get('total_voters') or 1) - 1
                appealManager.update_appeal(case_id, 'expected_responses', expected_responses)
                user_states[user_id]['state'] = 'awaiting_main_argument'
                bot.send_message(message.chat.id, "–ü–æ–Ω—è—Ç–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.", reply_markup=types.ReplyKeyboardRemove())
            elif message.text.startswith("–ù–µ—Ç"):
                bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º, –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
                appealManager.delete_appeal(case_id)
                user_states.pop(user_id, None)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

        elif state == 'awaiting_main_argument':
            appealManager.update_appeal(case_id, 'applicant_arguments', message.text)
            user_states[user_id]['state'] = 'awaiting_q1'
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.")
            bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1/3: –ö–∞–∫–æ–π –ø—É–Ω–∫—Ç —É—Å—Ç–∞–≤–∞, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –±—ã–ª –Ω–∞—Ä—É—à–µ–Ω?")

        elif state == 'awaiting_q1':
            appeal = appealManager.get_appeal(case_id)
            if appeal:
                current_answers = appeal.get('applicant_answers', {}) or {}
                current_answers['q1'] = message.text
                appealManager.update_appeal(case_id, 'applicant_answers', current_answers)
            user_states[user_id]['state'] = 'awaiting_q2'
            bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 2/3: –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º?")

        elif state == 'awaiting_q2':
            appeal = appealManager.get_appeal(case_id)
            if appeal:
                current_answers = appeal.get('applicant_answers', {}) or {}
                current_answers['q2'] = message.text
                appealManager.update_appeal(case_id, 'applicant_answers', current_answers)
            user_states[user_id]['state'] = 'awaiting_q3'
            bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 3/3: –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–∞–∂–Ω—ã–π –¥–ª—è –¥–µ–ª–∞?")

        elif state == 'awaiting_q3':
            appeal = appealManager.get_appeal(case_id)
            if appeal:
                current_answers = appeal.get('applicant_answers', {}) or {}
                current_answers['q3'] = message.text
                appealManager.update_appeal(case_id, 'applicant_answers', current_answers)
            user_states.pop(user_id, None)
            log.info(f"[flow] q3 saved; dialog closed case_id={case_id}")
            request_counter_arguments(bot, case_id)