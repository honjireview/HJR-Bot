# -*- coding: utf-8 -*-
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞–Ω–∞–ª–æ–º/—á–∞—Ç–æ–º –°–æ–≤–µ—Ç–∞ (EDITORS_CHANNEL_ID).
"""
import os
import re
import logging
from datetime import datetime, timedelta
from typing import Optional, Union

import appealManager

log = logging.getLogger("hjr-bot.council_helpers")

_RESOLVED = {"value": None}

def resolve_council_id() -> Optional[Union[int, str]]:
    """
    –†–µ–∑–æ–ª–≤–∏—Ç EDITORS_CHANNEL_ID –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ int (–Ω–∞–ø—Ä–∏–º–µ—Ä -100...) –∏–ª–∏ –≤ username '@...'.
    –ö–µ—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    if _RESOLVED["value"] is not None:
        return _RESOLVED["value"]
    raw = (os.getenv("EDITORS_CHANNEL_ID") or "").strip()
    if not raw:
        log.warning("[council_helpers] EDITORS_CHANNEL_ID not set")
        return None
    raw = raw.strip("\"' ")
    if re.fullmatch(r'-?\d+', raw):
        try:
            val = int(raw)
            _RESOLVED["value"] = val
            log.info(f"[council_helpers] resolved to int {val}")
            return val
        except Exception: pass
    if raw.startswith("@") or re.fullmatch(r'[A-Za-z0-9_]{3,}', raw):
        username = raw if raw.startswith("@") else f"@{raw}"
        _RESOLVED["value"] = username
        log.info(f"[council_helpers] resolved to username {username}")
        return username
    log.error(f"[council_helpers] cannot resolve EDITORS_CHANNEL_ID: '{raw}'")
    return None

def is_link_from_council(bot, parsed_from_chat_id: Union[int, str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ parsed_from_chat_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç EDITORS_CHANNEL_ID.
    """
    resolved = resolve_council_id()
    if not resolved:
        return True
    try:
        if isinstance(resolved, int):
            try:
                return int(parsed_from_chat_id) == resolved
            except Exception: pass
        if isinstance(resolved, str) and str(parsed_from_chat_id).lower() == str(resolved).lower():
            return True
        target_chat = bot.get_chat(resolved)
        parsed_chat = bot.get_chat(parsed_from_chat_id)
        if target_chat and parsed_chat:
            if getattr(target_chat, "id", None) and getattr(parsed_chat, "id", None):
                if int(target_chat.id) == int(parsed_chat.id):
                    return True
    except Exception as ex:
        log.exception(f"[council_helpers] error during council link check: {ex}")
    return False

def request_counter_arguments(bot, case_id: int):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ü–û–õ–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –¥–µ–ª—É case_id –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç –°–æ–≤–µ—Ç–∞.
    """
    appeal = appealManager.get_appeal(case_id)
    if not appeal:
        log.warning(f"[council_helpers] appeal #{case_id} not found for request_counter_arguments")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    decision_text = appeal.get("decision_text") or "(–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    applicant_args = appeal.get("applicant_arguments") or "(–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã)"
    answers = appeal.get("applicant_answers") or {}
    q1 = answers.get("q1", "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)")
    q2 = answers.get("q2", "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)")
    q3 = answers.get("q3", "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)")
    bot_username = bot.get_me().username

    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ---
    request_text = (
        f"üì£ *–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}* üì£\n\n"
        f"–û—Å–ø–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ:\n"
        f"```\n{decision_text}\n```\n\n"
        f"*–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è:*\n"
        f"{applicant_args}\n\n"
        f"*–£—Ç–æ—á–Ω—è—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è:*\n"
        f"1. *–ù–∞—Ä—É—à–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —É—Å—Ç–∞–≤–∞:* {q1}\n"
        f"2. *–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* {q2}\n"
        f"3. *–î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç:* {q3}\n\n"
        f"---"
        f"\n*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤:*\n"
        f"–î–ª—è –ø–æ–¥–∞—á–∏ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º (@{bot_username}) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n\n"
        f"`/reply {case_id}`\n\n"
        f"_(–°—Ä–æ–∫: 24 —á–∞—Å–∞)_"
    )

    target = resolve_council_id()
    if not target:
        log.error(f"[council_helpers] EDITORS_CHANNEL_ID not set ‚Äî cannot send request for case #{case_id}")
        return

    try:
        bot.send_message(target, request_text, parse_mode="Markdown")
        log.info(f"[council_helpers] sent counter-argument request for case #{case_id} to {target}")
    except Exception as e:
        log.exception(f"[council_helpers] failed to send request for case #{case_id} to {target}: {e}")
        return

    expires_at = datetime.utcnow() + timedelta(hours=24)
    try:
        appealManager.update_appeal(case_id, "timer_expires_at", expires_at)
        log.info(f"[council_helpers] set timer for case #{case_id} at {expires_at.isoformat()}")
    except Exception:
        log.exception(f"[council_helpers] failed to update timer for case #{case_id}")