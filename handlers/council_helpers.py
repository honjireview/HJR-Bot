# -*- coding: utf-8 -*-
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞–Ω–∞–ª–æ–º/—á–∞—Ç–æ–º –°–æ–≤–µ—Ç–∞ (EDITORS_CHANNEL_ID).
–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è set_council_chat_id_runtime –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã —Ä–µ–∑–æ–ª–≤-–∑–Ω–∞—á–µ–Ω–∏—è
–µ—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ (runtime override).
"""
import os
import re
import logging
from datetime import datetime, timedelta
from typing import Optional, Union

import appealManager

log = logging.getLogger("hjr-bot.council_helpers")

_RESOLVED = {"value": None}

def resolve_council_id() -> Optional[Union[int, str]]:
    """
    –†–µ–∑–æ–ª–≤–∏—Ç EDITORS_CHANNEL_ID –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ int (–Ω–∞–ø—Ä–∏–º–µ—Ä -100...) –∏–ª–∏ –≤ username '@...'.
    –ö–µ—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    if _RESOLVED["value"] is not None:
        return _RESOLVED["value"]
    raw = (os.getenv("EDITORS_CHANNEL_ID") or "").strip()
    if not raw:
        log.warning("[council_helpers] EDITORS_CHANNEL_ID not set")
        return None
    raw = raw.strip("\"' ")

    # –ß–∏—Å–ª–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –∏–ª–∏ -100...
    if re.fullmatch(r'-?\d+', raw):
        try:
            val = int(raw)
            _RESOLVED["value"] = val
            log.info(f"[council_helpers] resolved to int {val}")
            return val
        except Exception:
            pass

    # username form
    if raw.startswith("@") or re.fullmatch(r'[A-Za-z0-9_]{3,}', raw):
        username = raw if raw.startswith("@") else f"@{raw}"
        _RESOLVED["value"] = username
        log.info(f"[council_helpers] resolved to username {username}")
        return username

    log.error(f"[council_helpers] cannot resolve EDITORS_CHANNEL_ID: '{raw}'")
    return None

def set_council_chat_id_runtime(chat_id: Union[int, str]):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç runtime-override –¥–ª—è —Ä–µ–∑–æ–ª–≤–∞ EDITORS_CHANNEL_ID.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ int chat_id (–Ω–∞–ø—Ä–∏–º–µ—Ä -100...) –ª–∏–±–æ —Å—Ç—Ä–æ–∫—É '@username'.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –±—ã–ª–∞ –Ω–µ–≤–µ—Ä–Ω–æ–π,
    –Ω–æ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ (copy/forward).
    """
    try:
        if isinstance(chat_id, str):
            s = chat_id.strip()
            # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–≤–∞—è ‚Äî –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ int
            if re.fullmatch(r'-?\d+', s):
                val: Union[int, str] = int(s)
            else:
                val = s if s.startswith("@") else f"@{s}"
        else:
            val = int(chat_id)
        _RESOLVED["value"] = val
        log.info(f"[council_helpers] runtime override: resolved set to {val}")
    except Exception as e:
        log.exception(f"[council_helpers] failed to set runtime council id override for {chat_id}: {e}")

def is_link_from_council(bot, parsed_from_chat_id: Union[int, str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ parsed_from_chat_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç EDITORS_CHANNEL_ID.
    –ï—Å–ª–∏ EDITORS_CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True (–Ω–µ—Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞).
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –∑–∞—Ç–µ–º ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ bot.get_chat –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    resolved = resolve_council_id()
    if not resolved:
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å—Ç—Ä–æ–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return True

    try:
        # –ø—Ä—è–º–æ–µ —á–∏—Å–ª–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if isinstance(resolved, int):
            try:
                return int(parsed_from_chat_id) == resolved
            except Exception:
                # parsed –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π '@username' ‚Äî –¥–∞–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ API
                pass

        # —Å—Ç—Ä–æ–∫–æ–≤–æ–µ username == username
        if isinstance(resolved, str) and str(parsed_from_chat_id).lower() == str(resolved).lower():
            return True

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ API –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å id/username/title
        try:
            target_chat = bot.get_chat(resolved)
        except Exception as e:
            log.debug(f"[council_helpers] get_chat(resolved) failed: {e}")
            target_chat = None

        try:
            parsed_chat = bot.get_chat(parsed_from_chat_id)
        except Exception as e:
            log.debug(f"[council_helpers] get_chat(parsed) failed: {e}")
            parsed_chat = None

        if target_chat and parsed_chat:
            # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ id
            if getattr(target_chat, "id", None) and getattr(parsed_chat, "id", None):
                if int(target_chat.id) == int(parsed_chat.id):
                    return True
            # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ username
            t_un = getattr(target_chat, "username", None)
            p_un = getattr(parsed_chat, "username", None)
            if t_un and p_un and t_un.lower() == p_un.lower():
                return True
            # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ title
            t_title = getattr(target_chat, "title", None)
            p_title = getattr(parsed_chat, "title", None)
            if t_title and p_title and t_title == p_title:
                return True

    except Exception as ex:
        log.exception(f"[council_helpers] error during council link check: {ex}")

    return False

def request_counter_arguments(bot, case_id: int):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –¥–µ–ª—É case_id –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç –°–æ–≤–µ—Ç–∞.
    –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ timer_expires_at –≤ appeal.
    """
    appeal = appealManager.get_appeal(case_id)
    if not appeal:
        log.warning(f"[council_helpers] appeal #{case_id} not found")
        return

    decision_text = appeal.get("decision_text") or "(—Ç–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    applicant_args = appeal.get("applicant_arguments") or "(–∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã)"
    answers = appeal.get("applicant_answers") or {}
    q1 = answers.get("q1", "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)")
    q2 = answers.get("q2", "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)")
    q3 = answers.get("q3", "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)")

    request_text = (
        f"üì£ *–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}* üì£\n\n"
        f"*–†–µ—à–µ–Ω–∏–µ / —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–æ—Ä–∞:*\n{decision_text}\n\n"
        f"*–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è:*\n{applicant_args}\n\n"
        f"*–£—Ç–æ—á–Ω—è—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è:*\n"
        f"1) {q1}\n"
        f"2) {q2}\n"
        f"3) {q3}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. (–∞–ø–µ–ª–ª—è—Ü–∏—è #{case_id})"
    )

    target = resolve_council_id()
    if not target:
        log.error(f"[council_helpers] EDITORS_CHANNEL_ID not set ‚Äî cannot send request for case #{case_id}")
        return

    # –ï—Å–ª–∏ target ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–∞–º–∏, –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int
    if isinstance(target, str) and re.fullmatch(r'-?\d+', target):
        try:
            target = int(target)
        except Exception:
            pass

    try:
        bot.send_message(target, request_text, parse_mode="Markdown")
        log.info(f"[council_helpers] sent request for case #{case_id} to {target}")
    except Exception as e:
        log.exception(f"[council_helpers] failed to send with Markdown to {target}: {e}; trying without parse_mode")
        try:
            bot.send_message(target, request_text)
            log.info(f"[council_helpers] sent request without parse_mode for case #{case_id} to {target}")
        except Exception as e2:
            log.exception(f"[council_helpers] failed to send request for case #{case_id} to {target}: {e2}")
            return

    expires_at = datetime.utcnow() + timedelta(hours=24)
    try:
        appealManager.update_appeal(case_id, "timer_expires_at", expires_at)
        log.info(f"[council_helpers] set timer for case #{case_id} at {expires_at.isoformat()}")
    except Exception:
        log.exception(f"[council_helpers] failed to update timer for case #{case_id}")