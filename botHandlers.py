# -*- coding: utf-8 -*-

import telebot
from telebot import types
import random
import config
import os
import pandas as pd
import io
import threading

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import appealManager
import geminiProcessor

def register_handlers(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞.
    """

    # --- –®–∞–≥ 1: –ù–∞—á–∞–ª–æ ---
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        markup = types.InlineKeyboardMarkup()
        appeal_button = types.InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é", callback_data="start_appeal")
        markup.add(appeal_button)
        welcome_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ Honji Review. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å."
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "start_appeal")
    def handle_start_appeal_callback(call):
        msg = bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–µ—Ä–µ—à–ª–∏—Ç–µ** —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø—Ä–æ—Å (–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ) –ò–õ–ò **–ø—Ä–∏—à–ª–∏—Ç–µ CSV-—Ñ–∞–π–ª** —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑ Google Forms, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å–ø–æ—Ä–∏—Ç—å.")
        bot.register_next_step_handler(call.message, handle_decision_input)

    # --- –®–∞–≥ 2: –ü—Ä–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–ø–æ—Ä–∞ ---
    def handle_decision_input(message):
        is_forwarded = message.forward_from or message.forward_from_chat
        is_document = message.content_type == 'document'

        if not is_forwarded and not is_document:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ, –∏ —ç—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            return

        decision_text = ""
        voters_to_mention = []
        total_voters = None # <-- –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö

        if message.content_type == 'text':
            decision_text = message.text
        elif message.content_type == 'poll':
            poll = message.poll
            total_voters = poll.total_voter_count # <-- –°—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª-–≤–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö
            options_text = "\n".join([f"- {opt.text}: {opt.voter_count} –≥–æ–ª–æ—Å–æ–≤" for opt in poll.options])
            decision_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n–í–æ–ø—Ä–æ—Å: {poll.question}\n---\n{options_text}"
        elif is_document and message.document.mime_type == 'text/csv':
            try:
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                df = pd.read_csv(io.BytesIO(downloaded_file))
                decision_text = "–î–∞–Ω–Ω—ã–µ –∏–∑ Google Forms (CSV):\n---\n" + df.to_markdown(index=False)
                mention_col = 'Username' if 'Username' in df.columns else 'UserID' if 'UserID' in df.columns else None
                if mention_col:
                    voters_to_mention = df[mention_col].dropna().tolist()
            except Exception as e:
                bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å CSV-—Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {e}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
                return
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ CSV-—Ñ–∞–π–ª. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
            return

        case_id = random.randint(1000, 9999)
        initial_data = {
            'applicant_chat_id': message.chat.id,
            'decision_text': decision_text,
            'voters_to_mention': voters_to_mention,
            'applicant_answers': {},
            'council_answers': [],
            'total_voters': total_voters, # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª-–≤–æ
            'status': 'collecting' # <-- –°—Ç–∞—Ç—É—Å –¥–µ–ª–∞
        }
        appealManager.create_appeal(case_id, initial_data)

        bot.send_message(message.chat.id, f"–ü—Ä–∏–Ω—è—Ç–æ. –í–∞—à–µ–º—É –¥–µ–ª—É –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä #{case_id}.")

        if total_voters is not None:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("–î–∞, —è –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"), types.KeyboardButton("–ù–µ—Ç, —è –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"))
            msg = bot.send_message(message.chat.id, "–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –≤—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏?", reply_markup=markup)
            bot.register_next_step_handler(msg, handle_applicant_voted_response, case_id)
        else:
            msg = bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–æ—á–µ–º—É —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å.")
            bot.register_next_step_handler(msg, get_applicant_arguments, case_id)

    def handle_applicant_voted_response(message, case_id):
        appeal = appealManager.get_appeal(case_id)
        if not appeal: return

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        if message.text.startswith("–î–∞"):
            expected_responses = appeal['total_voters'] - 1
            appealManager.update_appeal(case_id, 'expected_responses', expected_responses)
            msg = bot.send_message(message.chat.id, "–ü–æ–Ω—è—Ç–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, get_applicant_arguments, case_id)
        elif message.text.startswith("–ù–µ—Ç"):
            bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º (–ø. 7.7 –£—Å—Ç–∞–≤–∞), –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.", reply_markup=types.ReplyKeyboardRemove())
            appealManager.delete_appeal(case_id) # –£–¥–∞–ª—è–µ–º –¥–µ–ª–æ
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("–î–∞, —è –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"), types.KeyboardButton("–ù–µ—Ç, —è –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)"))
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.", reply_markup=markup)
            bot.register_next_step_handler(msg, handle_applicant_voted_response, case_id)


    # --- –®–∞–≥ 3: –°–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–ø. –≤–æ–ø—Ä–æ—Å–æ–≤ –ó–ê–Ø–í–ò–¢–ï–õ–Æ ---
    def get_applicant_arguments(message, case_id):
        appealManager.update_appeal(case_id, 'applicant_arguments', message.text)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        ask_applicant_question_1(message, case_id)

    def ask_applicant_question_1(message, case_id):
        msg = bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1/3: –ö–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—É–Ω–∫—Ç —É—Å—Ç–∞–≤–∞, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –±—ã–ª –Ω–∞—Ä—É—à–µ–Ω —ç—Ç–∏–º —Ä–µ—à–µ–Ω–∏–µ–º?")
        bot.register_next_step_handler(msg, ask_applicant_question_2, case_id)

    def ask_applicant_question_2(message, case_id):
        appeal = appealManager.get_appeal(case_id)
        if appeal:
            appeal['applicant_answers']['q1'] = message.text
        msg = bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 2/3: –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")
        bot.register_next_step_handler(msg, ask_applicant_question_3, case_id)

    def ask_applicant_question_3(message, case_id):
        appeal = appealManager.get_appeal(case_id)
        if appeal:
            appeal['applicant_answers']['q2'] = message.text
        msg = bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 3/3: –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–µ, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –≤–∞–∂–Ω—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –¥–µ–ª–∞?")
        bot.register_next_step_handler(msg, request_counter_arguments, case_id)

    # --- –®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —É –°–æ–≤–µ—Ç–∞ –∏ –ó–ê–ü–£–°–ö –¢–ê–ô–ú–ï–†–ê ---
    def request_counter_arguments(message, case_id):
        appeal = appealManager.get_appeal(case_id)
        if not appeal: return
        appeal['applicant_answers']['q3'] = message.text
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –°–æ–≤–µ—Ç –†–µ–¥–∞–∫—Ç–æ—Ä–æ–≤. –£ –°–æ–≤–µ—Ç–∞ –µ—Å—Ç—å 24 —á–∞—Å–∞ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")

        request_text = f"""
üì£ **–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}** üì£

**–ó–∞—è–≤–∏—Ç–µ–ª—å –æ—Å–ø–∞—Ä–∏–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ:**
`{appeal['decision_text']}`

**–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è:**
`{appeal['applicant_arguments']}`
"""
        if appeal['voters_to_mention']:
            mentions = " ".join([f"@{str(v).replace('@', '')}" for v in appeal['voters_to_mention']])
            request_text += f"\n\n–ü—Ä–æ—à—É —Å–ª–µ–¥—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {mentions} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã."
        else:
            request_text += f"\n\n–ü—Ä–æ—à—É –°–æ–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é."
        request_text += f"\n\n–£ –≤–∞—Å –µ—Å—Ç—å 24 —á–∞—Å–∞. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/–æ—Ç–≤–µ—Ç {case_id}` –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
        bot.send_message(config.EDITORS_CHANNEL_ID, request_text, parse_mode="Markdown")

        print(f"–ó–∞–ø—É—Å–∫–∞—é 24-—á–∞—Å–æ–≤–æ–π —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–µ–ª–∞ #{case_id}...")
        timer = threading.Timer(86400, finalize_appeal_after_timeout, [case_id])
        appealManager.update_appeal(case_id, 'timer', timer) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        timer.start()

    # --- –®–∞–≥ 5: –°–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–ø. –≤–æ–ø—Ä–æ—Å–æ–≤ –°–û–í–ï–¢–£ ---
    @bot.message_handler(commands=['–æ—Ç–≤–µ—Ç'])
    def handle_counter_argument_command(message):
        try:
            parts = message.text.split()
            case_id = int(parts[1])
            if not appealManager.get_appeal(case_id):
                bot.send_message(message.chat.id, f"–î–µ–ª–æ —Å –Ω–æ–º–µ—Ä–æ–º {case_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ.")
                return

            user_id = message.from_user.id
            if any(answer['user_id'] == user_id for answer in appealManager.get_appeal(case_id)['council_answers']):
                bot.send_message(message.chat.id, "–í—ã —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ —ç—Ç–æ–º—É –¥–µ–ª—É.")
                return

            msg = bot.send_message(message.chat.id, f"–ò–∑–ª–æ–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã –°–æ–≤–µ—Ç–∞ –ø–æ –¥–µ–ª—É #{case_id}.")
            bot.register_next_step_handler(msg, ask_council_question_1, case_id, message.from_user)
        except (ValueError, IndexError):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–æ—Ç–≤–µ—Ç [–Ω–æ–º–µ—Ä_–¥–µ–ª–∞]")

    def ask_council_question_1(message, case_id, user):
        temp_answer = {
            'user_id': user.id,
            'responder_info': f"–û—Ç–≤–µ—Ç –æ—Ç {user.first_name} (@{user.username})",
            'main_arg': message.text
        }
        msg = bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1/2: –ù–∞ –∫–∞–∫–∏—Ö –ø—É–Ω–∫—Ç–∞—Ö —É—Å—Ç–∞–≤–∞ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö –æ—Å–Ω–æ–≤—ã–≤–∞–ª–∞—Å—å –ø–æ–∑–∏—Ü–∏—è –°–æ–≤–µ—Ç–∞?")
        bot.register_next_step_handler(msg, ask_council_question_2, case_id, temp_answer)

    def ask_council_question_2(message, case_id, temp_answer):
        temp_answer['q1'] = message.text
        msg = bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 2/2: –ö–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –ø–æ—á–µ–º—É?")
        bot.register_next_step_handler(msg, save_council_answers, case_id, temp_answer)

    def save_council_answers(message, case_id, temp_answer):
        temp_answer['q2'] = message.text
        appealManager.add_council_answer(case_id, temp_answer)
        bot.send_message(message.chat.id, f"–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ –¥–µ–ª—É #{case_id} –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –ø—Ä–∏ –≤—ã–Ω–µ—Å–µ–Ω–∏–∏ –≤–µ—Ä–¥–∏–∫—Ç–∞. –°–ø–∞—Å–∏–±–æ!")

        # --- –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ó–ê–í–ï–†–®–ê–ï–ú –î–û–°–†–û–ß–ù–û? ---
        appeal = appealManager.get_appeal(case_id)
        if appeal and appeal.get('expected_responses') is not None:
            if len(appeal['council_answers']) >= appeal['expected_responses']:
                print(f"–í—Å–µ {appeal['expected_responses']} –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –¥–µ–ª—É #{case_id} —Å–æ–±—Ä–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–∞—é –¥–æ—Å—Ä–æ—á–Ω–æ.")
                # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
                if 'timer' in appeal and appeal['timer']:
                    appeal['timer'].cancel()
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
                finalize_appeal_after_timeout(case_id)


    # --- –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Ç–∞–π–º–µ—Ä—É –∏–ª–∏ –¥–æ—Å—Ä–æ—á–Ω–æ) ---
    def finalize_appeal_after_timeout(case_id):
        appeal = appealManager.get_appeal(case_id)
        if not appeal or appeal.get('status') == 'closed':
            return # –ï—Å–ª–∏ –¥–µ–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        print(f"–ó–∞–≤–µ—Ä—à–∞—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –¥–µ–ª–∞ #{case_id}.")
        appealManager.update_appeal(case_id, 'status', 'closed') # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å

        bot.send_message(appeal['applicant_chat_id'], f"–°–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –¥–µ–ª—É #{case_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –î–µ–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ò–ò-–∞—Ä–±–∏—Ç—Ä—É.")
        bot.send_message(config.EDITORS_CHANNEL_ID, f"–°–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ –¥–µ–ª—É #{case_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –î–µ–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ò–ò-–∞—Ä–±–∏—Ç—Ä—É.")

        ai_verdict = geminiProcessor.get_verdict_from_gemini(case_id)

        applicant_full_text = f"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {appeal.get('applicant_arguments', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —É—Å—Ç–∞–≤–∞: {appeal['applicant_answers'].get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏: {appeal['applicant_answers'].get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {appeal['applicant_answers'].get('q3', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
        council_answers_list = appeal.get('council_answers', [])
        if council_answers_list:
            council_full_text = ""
            for answer in council_answers_list:
                council_full_text += f"""
---
{answer.get('responder_info', '–û—Ç–≤–µ—Ç –æ—Ç –°–æ–≤–µ—Ç–∞')}:
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã: {answer.get('main_arg', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–û—Å–Ω–æ–≤–∞–Ω–∏–µ (–ø—É–Ω–∫—Ç—ã —É—Å—Ç–∞–≤–∞): {answer.get('q1', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–û—Ü–µ–Ω–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞—è–≤–∏—Ç–µ–ª—è: {answer.get('q2', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
---
"""
        else:
            council_full_text = "–°–æ–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫."

        final_report_text = f"""
‚öñÔ∏è **–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–ø–µ–ª–ª—è—Ü–∏–∏ ‚Ññ{case_id}** ‚öñÔ∏è

**–û—Å–ø–∞—Ä–∏–≤–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–¥–∞–Ω–Ω—ã–µ):**
`{appeal['decision_text']}`

**–ü–æ–∑–∏—Ü–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—è:**
`{applicant_full_text}`

**–ü–æ–∑–∏—Ü–∏—è –°–æ–≤–µ—Ç–∞:**
`{council_full_text}`

---

**{ai_verdict}**
"""

        try:
            bot.send_message(config.APPEALS_CHANNEL_ID, final_report_text, parse_mode="Markdown")
            bot.send_message(appeal['applicant_chat_id'], "–í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ:")
            bot.send_message(appeal['applicant_chat_id'], final_report_text, parse_mode="Markdown")
            print(f"–û—Ç—á–µ—Ç –ø–æ –¥–µ–ª—É #{case_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–µ–ª—É #{case_id}: {e}")

        appealManager.delete_appeal(case_id)